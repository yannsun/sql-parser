#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 152
#define YY_END_OF_BUFFER 153
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1106] =
    {   0,
        0,    0,    2,    2,  153,  151,    4,    4,  151,  151,
      144,  151,  144,  144,  147,  144,  144,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      144,    2,    2,    3,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,  139,    0,
        0,  150,    1,  147,  146,  145,  141,  140,  142,  149,
      149,  149,  149,  149,  149,  130,  149,  149,  149,  149,

      131,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  132,  149,  133,  134,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  135,
      136,  137,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  138,
      149,  149,  149,  149,  149,  149,  149,  149,  143,    2,
        2,    2,    2,    2,    2,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  148,  145,  116,  149,  117,  149,  149,  118,
      149,  119,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  120,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  121,  149,  149,  149,  149,

      149,  149,  149,  122,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  123,  149,  149,  124,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      125,  149,  149,  126,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  127,  149,  149,  149,  149,
      149,  128,  149,  149,  149,  149,  149,  129,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  149,  149,
      149,  149,  149,  149,  149,  149,   88,   89,  149,   90,
       91,  149,  149,  149,  149,   92,  149,  149,  149,  149,

       93,  149,  149,  149,   94,   95,  149,  149,  149,  149,
      149,   96,  149,   97,   98,  149,  149,   99,  149,  100,
      149,  149,  149,  149,  149,  149,  101,  149,  102,  103,
      104,  149,  105,  149,  149,  149,  149,  149,  149,  106,
      149,  149,  149,  149,  149,  107,  108,  149,  149,  149,
      149,  149,  149,  149,  109,  149,  149,  149,  149,  149,
      110,  111,  112,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  113,  149,  114,  149,  115,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   68,   69,
      149,   70,  149,  149,  149,  149,  149,  149,  149,  149,
       71,  149,  149,  149,  149,   72,  149,  149,  149,  149,

      149,  149,  149,  149,   73,  149,   74,  149,  149,  149,
       75,   76,  149,  149,  149,  149,   77,   78,  149,  149,
      149,   79,   80,  149,  149,  149,   81,   82,  149,  149,
      149,  149,  149,   83,  149,  149,  149,  149,  149,   84,
      149,  149,  149,  149,  149,  149,   85,  149,  149,  149,
      149,   86,  149,  149,  149,   87,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  149,  149,   43,  149,   44,  149,
       45,  149,   46,  149,  149,  149,   47,   48,  149,   49,
       50,   51,  149,   52,  149,   53,   54,  149,   55,   56,
      149,  149,   57,  149,  149,  149,  149,  149,   58,  149,
      149,  149,   59,  149,   60,   61,  149,   62,  149,   63,
      149,  149,  149,  149,  149,  149,   64,   65,  149,   66,
       67,  149,  149,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   25,  149,   26,   27,   28,   29,  149,  149,
       30,  149,   31,   32,   33,   34,  149,  149,  149,  149,
      149,  149,   35,  149,  149,   36,   37,  149,   38,  149,
       39,  149,  149,  149,   40,  149,  149,  149,   41,   42,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  149,   14,
      149,   15,  149,   16,   17,  149,  149,  149,   18,  149,
       19,   20,  149,  149,   21,   22,   23,   24,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  149,  149,
       10,  149,   11,  149,  149,   12,   13,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  149,    6,    7,    8,
        9,    2,    2,    2,    2,    2,  149,    2,  149,    2,

      149,    2,    5,    2,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_uint16_t yy_base[1113] =
    {   0,
        0,    0,   67,    0,  380, 7112,  133,  135,  367,    0,
     7112,  370,  131,  361,  133,  132,  358,  129,  133,  136,
      148,  175,  183,  122,  182,  194,  131,  147,  197,  200,
      202,  231,  241,    0,  238,  284,  327,  242,  237,  246,
      300,    0,  207,  273,  354,  360,    0,  357,  191,  352,
      270,  278,  347,  385,  452,  506,  558,  606,  654,  286,
      453,  701,  381,  298,  444,  308,  752,  796,  844,  380,
      504,  890,  942,  541,  563,  604,  261,  304, 7112,  304,
      296, 7112, 7112,  305,  274,  263, 7112, 7112, 7112,    0,
      237,  228,  370,  406,  239,  309,  301,  355,  334,  328,

        0,  396,  364,  454,  455,  365,  391,  595,  453,  415,
      440,  448,  469,  471,  646,  463,  475,  485,  493,  498,
      497,  504,  501,  508,    0,  528,  681,  547,  553,  541,
      569,  566,  680,  615,  603,  601,  606,  615,  636,  644,
        0,  657,  645,  652,  670,  700,  697,  684,  695,  711,
      702,  718,  706,  728,  731,  723,  735,  734,  741,  729,
      728,  780,  753,  754,  759,  788,  763,  749, 7112,    0,
      316,    0,  228,  221,    0,    0,  312,  214,  162,    0,
        0,    0,  818,  909,  944,  970,  827,  846,  983,  890,
      994, 1012, 1022, 1033, 1044, 1051, 1072, 1087, 1105, 1123,

     1172, 1144, 1127, 1159, 1180, 1198, 1221, 1270, 1125, 1235,
     1260, 1270, 1285, 1310, 1313, 1325, 1351, 1364, 1365, 1413,
     1395, 1417, 1426, 1309, 1473, 1521, 1462, 1467, 1484, 1520,
     1511, 1555, 1566, 1567, 1588, 1604, 1572, 1625, 1618, 1431,
     1652, 1670, 1676, 1686, 1691, 1723, 1703, 1745, 1724, 1764,
     1777, 1787, 1806, 1820, 1841, 1820, 1831, 1876, 1881, 1886,
     1922,    0, 7112,  159,    0,  780,    0,  802,  797,    0,
      812,    0,  809,  824,  823,  838,  859,  851,  962,  864,
      864,  877,  899,  882,    0,  914,  924,  938, 1000,  951,
      953,  952,  996,  995, 1035,    0, 1048, 1046, 1059, 1055,

     1065, 1075, 1086,    0, 1081, 1086, 1103, 1091, 1132, 1143,
     1146, 1162, 1173, 1193, 1198, 1209, 1223, 1195, 1206,    0,
     1207, 1227, 1225, 1238, 1252, 1269, 1280, 1322, 1312, 1318,
        0, 1333, 1346, 1349, 1364, 1380, 1393, 1379, 1385, 1417,
     1446, 1428, 1484, 1496, 1525,    0, 1510, 1525, 1524, 1528,
     1540,    0, 1539, 1554, 1575, 1623, 1606,    0, 1620, 1715,
     1620, 1629, 1640, 1628, 1627, 1653, 1649, 1706, 1740, 1734,
        0,  142, 1927, 1932, 1968, 1973, 1978, 1983, 2012, 2017,
     2022, 2027, 2057, 2072, 2084, 2078, 2116, 2121, 2126, 2143,
     2157, 2163, 2184, 2188, 2206, 2211, 2232, 2258, 2257, 2286,

     2303, 2311, 2312, 2340, 2345, 2365, 2366, 2395, 2396, 2418,
     2410, 2447, 2450, 2455, 2472, 2499, 2501, 2501, 2526, 2547,
     2553, 2552, 2580, 2588, 2606, 2607, 2622, 2638, 2652, 2642,
     2683, 2692, 2685, 2725, 2733, 2743, 2715, 2765, 2769, 2787,
     2259, 2737, 2796, 2797, 2823, 2828, 2842, 2863, 2877, 2895,
     2912, 2923, 2940, 2941, 2958, 2959, 2994, 2995, 2977, 3012,
     3027, 3048, 3026, 3049, 3066, 3081, 3080, 3107, 3034, 3098,
     3124, 3124, 3139, 3156, 3168, 3179, 3216, 3217, 1762, 1772,
     1767, 1771,  109, 1813, 1832, 1832,    0,    0, 1874,    0,
        0, 1863, 1860, 1869, 1877, 1877, 1907, 1908, 1915, 1939,

        0, 1940, 1936, 1936,    0,    0, 1933, 1973, 1973, 1977,
     1998,    0, 1982,    0,    0, 2035, 2025,    0, 2032,    0,
     2032, 2049, 2064, 2073, 2077, 2176,    0, 2090,    0,    0,
        0, 2106,    0, 2121, 2187, 2117, 2138, 2173, 2177,    0,
     2198, 2224, 2229, 2230, 2236,    0,    0, 2250, 2253, 2259,
     2268, 2267, 2289, 2300,    0, 2314, 2326, 2325, 2336, 2341,
        0,    0, 2338, 2567, 2356, 2348, 2364, 2394, 2392, 2386,
     2406, 2423, 2421,    0, 2418,    0, 2444,    0, 3218, 3227,
     3262, 3264, 3272, 3272, 3297, 3309, 3320, 3325, 3354, 3359,
     3362, 3378, 3391, 3417, 3428, 3429, 3432, 3471, 3476, 3480,

     3485, 3517, 3531, 3532, 3537, 3549, 3570, 3582, 3589, 3625,
     3614, 3629, 3660, 3664, 3668, 3683, 3699, 3718, 3716, 3737,
     3753, 3738, 3775, 3759, 3770, 3791, 3813, 3816, 3829, 3852,
     3860, 3876, 3873, 3906, 3956, 3915, 3930, 3953, 3965, 3975,
     4008, 4000, 4013, 4029, 4051, 4045, 4061, 4082, 4086, 4104,
     4115, 4137, 4148, 4162, 4153, 4197, 4199, 4207, 4209, 4241,
     4243, 4251, 4099, 4299, 4293, 4298, 4305, 4335, 4351, 4340,
     4389, 4245, 4366, 4403, 4405, 4428, 4436, 4453,    0,    0,
     2435,    0, 2476, 2498, 2500, 2495, 2513, 2504, 2513, 2534,
        0, 2554, 2556, 2568, 2577,    0, 2586, 2596, 2612, 2621,

     2623, 2640, 2656, 2673,    0, 2671,    0, 2678, 2696, 2734,
        0,    0, 2742, 2766, 2781, 2791,    0,    0, 2792, 2805,
     2828,    0,    0, 2845, 2845, 2837,    0,    0, 2854, 2844,
     2845, 2859, 2885,    0, 2894, 2877, 2902, 2908, 2928, 2911,
     2913, 2931, 2957, 2960, 2980, 3068,    0, 3084, 3110, 3101,
     3142,    0, 3139, 3167, 3175,    0, 4454, 4455, 4490, 4492,
     4509, 4527, 4528, 4545, 4564, 4484, 4584, 4582, 4599, 4618,
     4624, 4635, 4644, 4650, 4672, 4676, 4689, 4698, 4724, 4726,
     4728, 4752, 4777, 4778, 4787, 4813, 4822, 4836, 4854, 4868,
     4886, 4885, 4852, 4906, 4924, 4927, 4930, 4955, 4977, 4983,

     5009, 4978, 5022, 5031, 5041, 5053, 5079, 5079, 5092, 5114,
     5123, 5129, 5121, 5156, 5155, 5181, 5187, 5202, 5204, 5226,
     5242, 5246, 5270, 5279, 5283, 5305, 5311, 5321, 5343, 5344,
     5347, 5363, 5386, 5388, 3174, 3168,    0, 3178,    0, 3188,
     3183, 3201,    0, 3202, 3240, 3233,    0,    0, 3252,    0,
        0,    0, 3251,    0, 3271,    0,    0, 3266,    0,    0,
     3274, 3305,    0, 3306, 3301, 3342, 3320, 3339,    0, 3325,
     3381, 3363,    0, 3389, 3375,    0, 3381,    0, 3386,    0,
     3427, 3429, 3418, 3414, 3421, 3446,    0,    0, 3479,    0,
        0, 3469, 3476, 5408, 5380, 5427, 5431, 5440, 5444, 5473,

     5476, 5487, 5517, 5520, 5523, 5541, 5564, 5572, 5585, 5608,
     5616, 5633, 5639, 5649, 5662, 5665, 5687, 5693, 5705, 5722,
     5722, 5737, 5750, 5763, 5813, 5785, 5819, 5829, 5854, 5807,
     5861, 5879, 5880, 5909, 5910, 5923, 5951, 5954, 5965, 5966,
     5997, 6002, 6006, 6017, 6023, 6047, 6053, 6070, 6071, 6096,
     6106, 6106,    0, 3495,    0,    0,    0,    0, 3494, 3502,
        0, 3530,    0,    0,    0,    0, 3548, 3551, 3552, 3580,
     3579, 3591,    0, 3579, 3595,    0,    0, 3585,    0, 3592,
        0, 3598, 3615, 3631,    0, 3621, 3644, 3660,    0,    0,
     6121, 6131, 6150, 6159, 6160, 6169, 6188, 6208, 6213, 6217,

     6232, 6248, 6257, 6267, 6272, 6302, 6307, 6327, 6320, 6355,
     6364, 6364, 6381, 6383, 6409, 6418, 6419, 6427, 6437, 6454,
     6472, 6482, 6500, 6518, 6517, 6563, 6545, 6571, 3648,    0,
     3650,    0, 3679,    0,    0, 3686, 3698, 3699,    0, 3717,
        0,    0, 3711, 3753,    0,    0,    0,    0, 6568, 6600,
     6606, 6611, 6616, 6644, 6654, 6669, 6685, 6657, 6700, 6717,
     6722, 6731, 6748, 6766, 6776, 6781, 6798, 6817, 3785, 3788,
        0, 3804,    0, 3790, 3803,    0,    0, 6826, 6827, 6835,
     6852, 6871, 6877, 6881, 6887, 6922, 3810,    0,    0,    0,
        0, 6930, 6933, 6936, 6966, 6974, 3824, 6991, 3824, 6980,

     3822, 7020,    0, 7023, 7112, 7087, 7091,  136, 7095, 7099,
     7103, 7107
    } ;

static yyconst flex_int16_t yy_def[1113] =
    {   0,
     1105,    1, 1105,    3, 1105, 1105, 1105, 1105, 1105, 1106,
     1105, 1107, 1105, 1105, 1105, 1105, 1105, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1105, 1109, 1109, 1105, 1109, 1110, 1109, 1111, 1109, 1109,
     1109, 1109, 1109, 1112, 1112,   55,   55,   55,   55,   55,
       55,   58,   58,   55,   55,   55,   59,   59,   59,   68,
       55,   55,   57,   58,   57,   55, 1109, 1105, 1105, 1106,
     1107, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,

     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1105, 1109,
     1109, 1109, 1110, 1111, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109,   55,   55,   55,   55,   67,   68,   68,   68,
       68,   68,   67,   67,   58,   67,   58,   67,   67,   67,

       58,   58,   67,   67,   58,   58,   58,   55,   55,   67,
       68,   67,   55,   67,   67,   67,   58,   58,   58,   58,
       58,   55,   55,   68,   68,   68,   68,   68,   68,   68,
       55,   67,   68,   68,   68,   68,   68,   67,   55,   58,
       58,   58,   58,   67,   67,   68,   67,   67,   58,   58,
       55,   58,   58,   67,   58,   58,   55,   55,   55,   55,
       55, 1109, 1105, 1105, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,

     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1109, 1109,   55,   55,   55,   55,   55,   55,   67,   67,
       67,   67,   67,   55,   55,   55,   55,   68,   68,   68,
       67,   58,   58,   55,   55,   67,   55,   55,   55,   55,

       55,   55,   55,   55,   67,   55,   55,   58,   58,   55,
       67,   67,   67,   55,   55,   67,   67,   55,   55,   55,
       67,   55,   55,   55,   55,   67,   58,   58,   58,   55,
       55,   55,   67,   67,   55,   55,   67,   67,   67,   55,
       68,   58,   55,   55,   67,   58,   58,   58,   67,   67,
       67,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   58,   55,   55,   55,   58,   67,   67,   55,
       67,   58,   67,   67,   67,   67,   68,   68, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,

     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,   68,   68,
       55,   55,   55,   68,   55,   68,   68,   68,   67,   67,
       67,   67,   68,   68,   58,   58,   58,   68,   68,   67,

       67,   67,   55,   55,   55,   55,   55,   55,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   68,   68,
       67,   68,   58,   68,   68,   68,   68,   58,   58,   58,
       58,   58,   58,   58,   58,   68,   55,   58,   68,   68,
       68,   55,   68,   68,   68,   68,   68,   67,   67,   67,
       68,   68,   68,   68,   68,   55,   55,   55,   55,   67,
       67,   67,   58,   55,   55,   58,   67,   67,   67,   67,
       67,   55,   55,   55,   67,   67,   55,   55, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,

     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   58,   67,   55,   55,   55,
       67,   55,   55,   55,   55,   58,   55,   55,   55,   55,
       58,   55,   55,   55,   55,   55,   68,   68,   68,   68,
       68,   55,   58,   58,   58,   58,   58,   55,   55,   55,

       55,   67,   67,   67,   67,   67,   55,   68,   68,   55,
       55,   55,   67,   67,   55,   55,   67,   58,   68,   68,
       58,   58,   55,   67,   67,   55,   55,   58,   55,   55,
       58,   67,   67,   67, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108,   55,   58,   58,   58,   58,   55,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   55,   55,   58,   58,   58,   55,   55,   55,   68,
       55,   55,   67,   58,   55,   55,   67,   67,   67,   55,
       55,   55,   55,   58,   58,   58,   58,   58,   58,   67,
       67,   67,   67,   58,   58,   58,   58,   55,   55,   55,
       68,   55, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
       55,   55,   55,   55,   55,   55,   55,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   55,   68,   55,
       55,   68,   55,   55,   55,   55,   55,   55,   55,   68,
       68,   68,   68,   68,   55,   55,   55,   55, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,   68,   68,
       68,   68,   68,   68,   68,   67,   67,   58,   58,   68,
       68,   68,   55,   55,   55,   55,   55,   55, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108,   55,   55,   55,
       55,   55,   55,   58,   58,   58, 1108, 1108, 1108, 1108,
     1108,   58,   58,   58,   58,   58, 1108,   55, 1108,   58,

     1108,   58, 1108,   58,    0, 1105, 1105, 1105, 1105, 1105,
     1105, 1105
    } ;

static yyconst flex_uint16_t yy_nxt[7180] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   11,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   34,   34,   34,    6,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   34,   34,   34,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   47,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       74,   75,   76,   70,   70,   70,   42,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
       70,   70,   70,   77,   78,   78,   78,   78,   83,   90,
       84,   86,   84,   87,   88,   91,  121,   92,  683,  102,
       98,  372,  122,   93,   99,   94,  103,  100,  129,   95,
       96,  107,   97,  104,  130,  108,  105,  106,  264,  109,
      101,  372,   91,  121,   92,  110,  102,   98,  111,  122,
       93,   99,   94,  103,  100,  129,   95,   96,  107,   97,
      104,  130,  108,  105,  106,  123,  109,  101,  176,  112,

      177,  113,  110,  124,  116,  111,  114,  117,  171,   78,
      118,  115,  125,  119,  131,  136,  120,  134,  132,  126,
      127,  135,  123,  178,  133,  128,  112,  175,  113,  137,
      124,  116,  371,  114,  117,  138,  139,  118,  115,  125,
      119,  131,  136,  120,  134,  132,  126,  127,  135,  140,
      165,  133,  128,  265,  144,  147,  137,  141,  166,  148,
      266,  142,  138,  139,  143,  145,  167,  168,  162,  271,
      163,  146,  264,  164,   78,   78,  140,  165,  179,  177,
      265,  144,  147,   85,  141,  166,  148,  266,  142,  180,
      181,  143,  145,  167,  168,  162,  271,  163,  146,  149,

      164,  150,   82,  183,  151,   78,   78,  183,  263,  152,
      214,  153,  154,   86,   84,  223,  215,  171,   78,  183,
      179,  177,  183,  183,  272,  227,  149,  262,  150,  228,
      183,  151,  183,  273,  183,  183,  152,  214,  153,  154,
      155,  156,  223,  215,  157,  183,  183,  158,  159,  183,
      183,  272,  227,  276,  160,  277,  228,  161,  182,  183,
      273,  178,  183,  175,  170,  172,  169,  155,  156,   89,
       85,  157,  183,  274,  158,  159,   82,  280,   79, 1105,
      276,  160,  277, 1105,  161,  170,  170,  275,  170,  170,
      170,  170,  170,  170,  267,  170,  170,  170,  183,  285,

      274,  184,  268,  185,  280,  183,  183,  183,  222,  186,
      183,  187,  183,  183,  275,  188,  189,  183,  190,  269,
      278,  267,  270,  286, 1105,  183,  285,  279,  184,  268,
      185, 1105,  183,  183,  183,  222,  186,  183,  187,  183,
      183, 1105,  188,  189,  183,  190,  269,  278,  293,  270,
      286,  170,  170,  170,  279,  170,  170,  170,  170,  170,
      170,  224,  170,  170,  170,  225,  216,  294,  183,  191,
      183,  226,  283,  192,  217,  293,  193,  183,  281,  295,
      282,  183,  284,  291,  292,  296,  297,  302,  224,  194,
      183, 1105,  225,  216,  294,  183,  191,  183,  226,  283,

      192,  217,  303,  193,  183,  281,  295,  282,  183,  284,
      291,  292,  296,  297,  302,  304,  194,  183,  170,  195,
      305,  240,  306,  183,  307,  241,  196,  183,  183,  303,
      183,  308,  309,  197,  311,  310,  198,  199, 1105,  312,
     1105,  183,  304,  183, 1105, 1105,  195,  305,  240,  306,
      183,  307,  241,  196,  183,  183,  313,  183,  308,  309,
      197,  311,  310,  198,  199,  183,  312,  255,  183,  256,
      183,  200,  257,  318,  319,  201,  258,  183,  320,  202,
      183, 1105,  183,  313,  259,  203, 1105,  321,  204,  322,
      183,  323,  183,  183,  255,  183,  256, 1105,  200,  257,

      318,  319,  201,  258,  183,  320,  202,  183,  287,  183,
     1105,  259,  203,  288,  321,  204,  322,  183,  323,  289,
      183,  183,  183,  183,  260,  261,  290,  183,  183,  329,
      205,  327,  206,  330, 1105,  287, 1105,  207,  331,  332,
      288,  183,  208,  183, 1105,  328,  289, 1105,  183,  333,
      183,  260,  261,  290,  183,  183,  329,  205,  327,  206,
      330,  298,  334,  299,  207,  331,  332,  300,  183,  208,
      183,  183,  328,  335,  301,  209,  333,  336,  210, 1105,
     1105,  211,  337,  338,  212, 1105, 1105,  213,  298,  334,
      299,  183, 1105,  324,  300,  325, 1105,  314,  183, 1105,

      335,  301,  209,  343,  336,  210,  326,  315,  211,  337,
      338,  212,  316,  317,  213,  344, 1105,  339,  183,  218,
      324,  340,  325,  341,  314,  183,  219,  220,  342,  347,
      343,  348,  221,  326,  315,  345,  349,  183, 1105,  316,
      317,  350,  344,  346,  339,  351,  218,  352,  340, 1105,
      341,  355,  183,  219,  220,  342,  347,  358,  348,  221,
      353,  359,  345,  349,  183,  229,  356,  357,  350,  363,
      346,  354,  351,  183,  352,  364,  183, 1105,  355,  230,
      369,  370,  183,  365,  358,  231,  232,  353,  359,  366,
     1105, 1105,  229,  356,  357, 1105,  363,  479,  354, 1105,

      183,  360,  364,  183,  361,  367,  230,  369,  370,  183,
      365,  362,  231,  232,  233, 1105,  366,  183,  368,  480,
      183,  481,  234,  183,  479,  482,  235, 1105,  360,  236,
     1105,  361,  367, 1105, 1105,  183,  483, 1105,  362,  183,
      377,  233,  183,  378,  183,  368,  480,  183,  481,  234,
      183,  484,  482,  235,  183,  183,  236,  237,  485,  486,
      183,  183,  183,  483,  183,  183,  183,  377,  238,  183,
      378,  183,  183,  487,  239,  488,  379,  183,  484,  183,
     1105,  183,  183, 1105,  237,  485,  486,  183,  183, 1105,
     1105,  183,  183, 1105,  491,  238, 1105,  492,  183,  183,

      487,  239,  488,  379,  183,  242,  183,  243,  183,  493,
      244,  183,  494,  495,  183,  245,  183,  246,  247, 1105,
      183,  491,  381,  183,  492,  373,  183,  183, 1105, 1105,
      183,  496,  242,  183,  243,  183,  493,  244,  183,  494,
      495,  183,  245,  183,  246,  247,  183,  183,  497,  381,
      183,  498,  373,  183,  183,  248,  249,  183,  496,  250,
      183,  183,  251,  252, 1105,  183,  501, 1105,  183,  253,
      502, 1105,  254,  183, 1105,  497,  374,  489,  498,  490,
     1105,  183,  248,  249,  503, 1105,  250,  183,  183,  251,
      252,  183,  183,  501,  375,  183,  253,  502,  380,  254,

     1105,  183,  376,  374,  489, 1105,  490,  183,  183,  183,
      504,  503,  382,  183,  183, 1105,  183,  499,  183, 1105,
      183,  375, 1105,  505,  183,  380,  383,  183,  183,  376,
      183,  384,  500, 1105,  183,  183,  183,  504,  183,  382,
      183, 1105,  183,  183,  499,  183,  183,  183, 1105,  385,
      505,  183,  506,  383,  183,  183,  183,  183,  384,  500,
      183,  507,  183,  508,  388,  183,  183,  183,  386,  183,
      183, 1105,  183,  183,  509,  387,  385, 1105,  183,  506,
      183, 1105,  183,  183,  183,  183,  510,  183,  507,  511,
      508,  388,  512,  183,  183,  386,  389,  183,  390,  513,

      183,  509,  387,  183,  391,  183,  514,  183,  183, 1105,
      515,  183,  183,  510,  392, 1105,  511,  516,  183,  512,
      183,  183, 1105,  389,  517,  390,  513,  183, 1105, 1105,
      183,  391,  183,  514, 1105,  183,  183,  515,  183,  393,
      183,  392,  183, 1105,  516,  183,  183,  183,  183,  410,
      183,  517,  518, 1105,  183,  394,  183,  183, 1105,  183,
      401,  183,  183,  183,  519,  183,  393,  183,  183,  183,
      183, 1105,  183,  183,  399,  400,  410,  183,  520,  518,
      183,  183,  394,  183,  183,  395,  402,  401,  183,  183,
      396,  519,  183,  183,  521,  183,  397,  183,  183,  183,

      522,  399,  400,  398,  183,  520,  183,  183,  183, 1105,
      523,  403,  395,  402,  404,  524,  183,  396, 1105,  183,
      183,  521,  183,  397,  183,  183,  525,  522,  528,  183,
      398,  183,  529,  183,  183,  183,  405,  523,  403,  530,
      526,  404,  524,  183,  531,  183,  532,  183,  183,  183,
      527,  183,  183,  525,  533,  528,  183,  183, 1105,  529,
     1105,  183,  411,  405, 1105,  534,  530,  526,  183,  183,
     1105,  531,  183,  532,  183,  183, 1105,  527,  183,  183,
     1105,  533, 1105,  183,  183,  406,  183,  407,  535,  411,
      412,  408,  534,  183,  183,  183,  183,  413,  409, 1105,

     1105,  536,  183,  183,  183,  183,  183,  183, 1105,  414,
      183, 1105,  406,  183,  407,  535, 1105,  412,  408, 1105,
      183,  183,  183,  183,  413,  409,  183,  429,  536,  183,
      183,  183, 1105,  183,  183,  183,  414,  415,  183,  183,
      416,  537,  183,  183,  183,  538,  183,  183, 1105,  183,
      183,  539,  183,  183,  429, 1105,  417,  540,  183,  418,
     1105, 1105,  183, 1105,  415,  183,  183,  416,  537,  183,
      183,  183,  538,  183,  183,  183,  541,  419,  539,  183,
      542,  543,  420,  417,  540,  183,  418,  183,  183,  183,
      183,  183, 1105,  421, 1105,  183,  183,  544, 1105, 1105,

      183,  183,  183,  541,  419,  547,  545,  542,  543,  420,
     1105, 1105, 1105,  548,  183,  183,  183,  183,  183,  183,
      421,  426,  183,  183,  544,  546,  183,  183,  183,  422,
     1105,  183,  547,  545,  183, 1105, 1105,  183,  427,  423,
      548,  183,  549,  183,  424,  425,  183,  183,  426,  183,
      183, 1105,  546,  183,  183,  183,  422,  449,  183,  550,
      551,  183,  450,  428,  183,  427,  423,  183,  183,  549,
      183,  424,  425, 1105,  183, 1105,  183,  183,  435, 1105,
      183,  183,  183, 1105,  449,  183,  550,  551,  183,  450,
      428,  183,  436,  437,  183,  183,  430,  183,  431,  183,

      183, 1105,  183,  183,  552,  435,  183,  183, 1105, 1105,
      183, 1105,  183,  553,  183,  183,  438,  183,  183,  436,
      437, 1105,  183,  430,  183,  431,  183,  183,  183,  183,
      183,  552,  183,  183,  432,  440,  433,  183,  183,  183,
      553,  183,  554,  438,  183,  555,  183,  434,  183,  556,
      183,  183,  439,  183,  183,  183,  557, 1105, 1105,  183,
      558,  432,  440,  433,  559,  183,  183,  560,  441,  554,
     1105, 1105,  555,  183,  434,  183,  556,  183,  183,  439,
      183,  183,  183,  557,  442,  183,  561,  558,  183,  183,
      183,  559,  183,  183,  560,  441,  183,  183,  183,  183,

      183,  562,  445, 1105,  443,  183,  183, 1105, 1105,  183,
     1105,  442,  183,  561,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  562,  445,
      183,  443,  183,  183,  183,  447,  444,  183,  446,  448,
      563,  183,  183,  564, 1105,  183,  565,  568,  183,  183,
      569, 1105,  183,  570,  571,  183, 1105,  183,  183,  183,
      572,  183,  447,  444,  183,  446,  448,  563,  573,  183,
      564,  451, 1105,  565,  568, 1105,  183,  569,  183,  183,
      570,  571,  183,  183,  574,  183,  183,  572,  183, 1105,
      452, 1105, 1105, 1105,  183,  573,  183, 1105,  451,  183,

      453,  183,  183,  183,  456,  183,  183,  183,  454, 1105,
      183,  574,  183,  455, 1105,  183,  458,  452,  183,  183,
      183,  183, 1105,  183,  183,  183,  183,  453,  183,  183,
      183,  456, 1105,  183,  183,  454,  183,  183,  575,  183,
      455,  183,  566,  458,  567,  183,  183,  183,  460,  183,
      183,  183,  183,  457,  578,  183,  183,  183,  183,  459,
      183, 1105, 1105,  183,  183,  575,  576, 1105,  183,  566,
      577,  567,  183, 1105, 1105,  460,  183,  183,  183,  183,
      457,  578,  183,  183, 1105,  183,  459,  183,  183,  461,
      183, 1105,  679,  576,  463,  183, 1105,  577,  183,  183,

      462,  183,  680, 1105,  681,  183,  183, 1105,  682, 1105,
     1105,  183,  464,  465,  183,  183,  461,  183,  183,  679,
     1105,  463,  183,  183, 1105,  183, 1105,  462,  183,  680,
      183,  681,  183,  183,  466,  682,  471,  183,  183,  464,
      465,  183,  183,  684,  183,  183,  183,  183,  183,  685,
      183,  183,  472,  467,  183,  183,  183,  183,  686,  183,
      183,  466,  468,  471,  183,  469, 1105,  183,  183,  183,
      684,  183,  470,  183,  183,  183,  685,  183,  183,  472,
      467,  183,  183,  183, 1105,  686, 1105,  687,  688,  468,
      689, 1105,  469,  183,  183,  183, 1105,  183,  475,  470,

      473,  690,  183,  477,  183,  183,  474,  183,  691,  692,
      183,  476, 1105,  183,  687,  688, 1105,  689,  183, 1105,
      183, 1105, 1105,  183,  183,  475, 1105,  473,  690,  183,
      477,  693,  183,  474,  183,  691,  692,  183,  476,  183,
      183,  694, 1105,  183,  183,  183,  183,  695,  183,  579,
      183,  183,  696,  183,  478,  697,  183,  698,  693,  183,
      699,  700, 1105, 1105,  183, 1105,  183, 1105,  694,  183,
      183,  183, 1105,  183,  695,  183,  579, 1105,  183,  696,
      183,  478,  697,  183,  698,  183,  183,  699,  700,  183,
      580,  183,  183, 1105,  183,  183,  183,  183, 1105,  183,

      183,  701,  581, 1105,  183,  183,  702,  183, 1105,  703,
      183,  704,  183, 1105,  705,  183,  183,  580, 1105,  183,
      183,  183,  183, 1105,  183,  582,  183,  183,  701,  581,
      183,  183,  183,  702,  183,  183,  703,  183,  704,  183,
      183,  705,  183, 1105,  183,  183,  183,  183,  706,  583,
      183,  183,  582,  707,  584,  183,  183,  183,  708,  709,
      183,  183,  183, 1105, 1105, 1105,  183,  183, 1105, 1105,
      183,  183,  183,  183, 1105,  706,  583,  183,  183,  710,
      707,  584,  183,  183,  183,  708,  709,  183,  183,  183,
      183,  183,  585,  586, 1105,  183,  183,  183,  587,  183,

      711,  183,  588,  712, 1105,  183,  710,  713,  183,  183,
     1105,  183, 1105, 1105,  716,  183,  183,  183,  183,  585,
      586,  183,  183,  183, 1105,  587,  183,  711,  183,  588,
      712,  589,  183,  590,  713,  183,  183,  183,  717,  183,
      183,  716,  183, 1105,  183,  718, 1105,  183,  183, 1105,
      721,  591,  183,  183,  183,  722,  183, 1105,  589,  592,
      590,  183, 1105, 1105,  183,  717,  183,  183, 1105,  183,
      594,  183,  718,  183,  183,  593,  183,  721,  591,  183,
      183,  183,  722,  183,  183, 1105,  592,  183,  183,  183,
      183,  183, 1105, 1105,  595,  714,  183,  594, 1105,  183,

      183,  719,  593,  183,  723,  596,  715,  724,  183,  183,
      183,  183,  183,  725,  183,  183,  183,  183,  183,  720,
      183,  595,  714,  183,  598,  183,  183,  183,  719, 1105,
      597,  723,  596,  715,  724,  183,  183,  183,  183,  183,
      725,  726,  183,  183,  183,  183,  720,  183, 1105,  599,
      183,  598,  183,  183,  183, 1105,  183,  597, 1105,  727,
      728,  729, 1105,  730,  600,  183,  731, 1105,  726,  183,
      183,  183,  183,  601,  602,  183,  599,  183,  183,  183,
      183,  183,  183,  183,  732,  183,  727,  728,  729,  641,
      730,  600,  183,  731,  183,  183,  183, 1105,  733,  734,

      601,  602,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  732,  183, 1105,  735,  736,  641,  604,  603,  183,
      183,  183,  183,  183,  183,  733,  734,  183,  183,  606,
      183, 1105,  183,  183,  183,  183,  183,  183,  737,  605,
      183,  735,  736,  738,  604,  603,  739,  183,  183,  183,
      183,  183, 1105,  740,  183,  183,  606,  183,  607,  183,
      183,  183,  183,  183,  183,  737,  605,  183,  741,  742,
      738,  746,  183,  739,  747,  183,  183,  183,  183,  183,
      740,  609,  608,  183,  183,  607,  183,  183,  183,  183,
      183,  183, 1105, 1105, 1105,  741,  742,  748,  746,  183,

     1105,  747,  183,  183,  183,  183,  183,  749,  609,  608,
      183,  750, 1105,  183,  183, 1105,  183,  183,  751,  183,
      611,  183,  183,  613,  748,  752,  610,  183, 1105,  183,
      183,  183,  183, 1105,  749,  612, 1105,  183,  750,  183,
      753,  754,  183,  183,  183,  751,  183,  611,  183,  183,
      613,  755,  752,  610,  183,  183, 1105, 1105,  183,  183,
      183,  756,  612,  183,  183, 1105,  183,  753,  754,  183,
      183,  183,  183,  835,  183,  614,  183,  183,  755,  615,
      183,  183,  183,  183,  183, 1105,  616,  183,  756,  183,
      183, 1105,  183,  183, 1105, 1105,  183,  836, 1105,  183,

      835,  183,  614,  183,  183, 1105,  615,  183,  183,  183,
      183,  183,  183,  616,  183,  837,  183,  838,  183,  183,
      183,  618,  619,  183,  836,  183,  183,  839,  183,  840,
      841, 1105,  617,  183,  183,  183,  183, 1105,  183,  183,
      842,  183,  837,  183,  838,  183, 1105,  183,  618,  619,
      183,  843,  183,  183,  839,  183,  840,  841,  620,  617,
      183,  183,  183,  183,  183,  183,  183,  842,  183,  623,
      183,  183, 1105,  183,  183,  844,  183,  183,  843,  621,
      622,  743, 1105,  845,  183,  620,  183,  183,  744,  183,
      183,  183,  846,  183,  847,  183,  623,  624,  183,  745,

      183,  183,  844,  183,  183,  625,  621,  622,  743,  183,
      845,  183,  183,  183,  183,  744,  183,  183,  848,  846,
      183,  847,  849,  626,  624,  183,  745,  183,  183,  850,
      183,  183,  625,  627,  183, 1105,  183, 1105,  851,  183,
      628,  183, 1105,  183,  183,  848,  183,  183,  629,  849,
      626, 1105,  183,  183,  183,  852,  850,  183,  183,  631,
      627,  183,  183,  183,  183,  851,  183,  628,  183,  183,
      183, 1105,  853,  183,  183,  629,  183, 1105,  183,  183,
      183, 1105,  852,  183,  630,  183,  631,  854,  183,  183,
      183,  183, 1105,  183,  855,  856,  183,  857,  634,  853,

      183,  183, 1105,  183,  632,  183,  183,  183,  633,  183,
      183,  630,  183,  183,  854,  183,  183, 1105,  183,  183,
      183,  855,  856, 1105,  857,  634,  858,  183,  183,  183,
     1105,  632, 1105, 1105,  183,  633,  183, 1105,  183,  183,
      183, 1105,  183,  183,  635,  183,  183,  183,  638,  183,
      183, 1105,  183,  858,  636,  183,  183,  183,  183,  183,
      183,  183,  637,  183,  183,  183,  859,  183,  642,  183,
      183,  635, 1105,  183,  860,  638,  183,  183,  183,  183,
      183,  636,  183,  861,  183,  183,  183,  183,  183,  637,
      183,  183,  183,  859,  183,  642,  183,  183,  639,  183,

      183,  860,  183,  183,  183,  183, 1105,  183,  183,  183,
      861,  640,  862,  643,  644,  863,  864,  183,  183,  183,
      183,  183,  865,  183,  183,  639,  183, 1105, 1105,  183,
      183,  183, 1105,  183,  183,  183,  645, 1105,  640,  862,
      643,  644,  863,  864,  183,  183, 1105,  183,  183,  865,
      183,  183,  183,  866,  647,  646,  183,  183,  867,  183,
      183,  183, 1105,  645,  183,  868,  183, 1105,  183,  869,
      648,  870, 1105,  183,  871,  872,  873,  183,  183,  183,
      866,  647,  646,  183,  183,  867,  183,  183,  649,  183,
      650,  183,  868,  183,  183,  183,  869,  648,  870,  183,

      183,  871,  872,  873,  183,  183,  874,  875,  183,  876,
      183,  183, 1105, 1105,  183,  649,  183,  650, 1105, 1105,
     1105,  183,  183,  877,  878,  183,  183,  651,  183,  183,
     1105,  183,  652,  874,  875,  183,  876,  183,  183,  183,
      653,  879,  880,  881,  183,  183,  183,  183, 1105,  183,
      877,  878,  183, 1105,  651,  183,  183,  654,  183,  652,
      183,  183,  183,  882,  183,  183,  183,  653,  879,  880,
      881,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  883,  183,  656,  654,  183,  884,  183,  183,  183,
      882,  183,  183,  655,  183,  183,  183,  885,  183, 1105,

     1105,  659,  183,  183,  183,  183,  183,  183,  883,  183,
      656,  183,  183,  884,  183,  183,  183, 1105,  183,  183,
      655,  183,  183,  183,  885,  183,  657,  658,  659,  183,
     1105,  183,  183,  183, 1105, 1105,  183, 1105,  183,  183,
     1105,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  662,  657,  658,  660,  183,  183,  183,  183,
      183,  668,  183,  183,  183,  183,  663,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  662,
      661,  886,  660,  183,  183,  183,  183,  183,  668,  183,
      183,  183,  183,  663,  183,  183,  183,  183,  183,  183,

      183,  887,  183,  664,  183,  183,  665,  661,  886, 1105,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  669,
      183, 1105,  183, 1105, 1105,  183,  888,  889,  887,  183,
      664,  183,  183,  665,  666,  183,  667,  670,  183, 1105,
      183,  183,  183,  183, 1105,  183,  669,  183,  183,  183,
      671,  183,  183,  888,  889,  183, 1105,  183,  183,  890,
      183,  666,  183,  667,  670, 1105,  183,  183,  183,  183,
      891,  673,  672,  183, 1105,  183, 1105,  671,  183,  183,
      892,  183,  183,  183,  183,  183,  890,  183,  893,  183,
      183,  953,  183,  183,  954,  183,  183,  891,  673,  672,

      183,  183,  183,  674,  955,  956,  183,  892,  183, 1105,
      183,  675,  183,  183,  957,  893,  183,  183,  953,  183,
     1105,  954,  183, 1105, 1105,  958, 1105,  959,  183,  183,
      674,  955,  956,  183,  183,  183,  183,  678,  675,  183,
      183,  957,  676,  183,  183,  183,  677,  183,  757,  183,
      183,  183,  958,  183,  959,  960, 1105,  758, 1105, 1105,
      183,  183,  183,  183,  678,  961, 1105,  962,  963,  676,
      183,  183,  183,  677,  183,  757,  183,  183,  183,  183,
      183,  183,  960,  183,  758,  183,  183,  183,  183,  183,
      183, 1105,  961,  183,  962,  963,  183,  964,  183,  759,

     1105,  760,  762,  965,  966,  183,  183, 1105,  183,  183,
      183,  761,  183,  183,  763,  183,  183,  183,  183, 1105,
      183,  183,  967,  183,  964,  183,  759,  183,  760,  762,
      965,  966,  183,  968,  183,  764,  183,  969,  183,  183,
     1105,  763,  183,  183,  973,  183,  183, 1105,  183,  967,
      183,  183,  974,  183,  183,  183,  970,  975,  183, 1105,
      968,  183,  764,  971,  969,  183,  183,  765, 1105,  183,
      183,  973,  183,  183,  972,  183, 1105,  183,  183,  974,
      183,  183,  183,  970,  975,  183,  183,  183,  183,  183,
      971,  183,  183,  183,  765,  183,  183, 1105,  976,  183,

      977,  972,  183,  766,  978,  183,  979,  980,  183,  183,
      981,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  767,  183,  183,  183,  976, 1105,  977, 1105, 1105,
      766,  978,  183,  979,  980,  183,  183,  981,  183,  183,
      982, 1105,  983,  183,  183,  984,  985,  183,  767,  768,
      183,  183,  183,  183,  183,  183,  771,  986,  183,  769,
      183,  770,  183,  183,  183,  183, 1105,  982,  183,  983,
      183, 1105,  984,  985,  183, 1105,  768,  183,  987,  183,
      183,  183,  183,  771,  986,  183,  769,  183,  770,  183,
      183,  183,  183,  774,  183,  183,  988,  183,  183,  989,

      990,  183,  183, 1105,  772,  987,  183,  183,  773,  183,
     1029, 1030,  183,  183,  183, 1031,  183, 1105,  183,  183,
      774,  183, 1105,  988,  183,  183,  989,  990,  183,  183,
      183,  772,  775,  183,  183,  773,  183, 1029, 1030,  183,
      183,  183, 1031, 1105,  183,  183,  183, 1105,  183,  183,
      183,  183,  776,  183,  183,  183,  777,  183,  183,  775,
     1105,  183, 1032, 1033, 1105, 1034,  183, 1105,  183,  183,
      183,  183, 1105,  183,  183,  183,  183,  183,  183,  776,
      183,  183,  183,  777, 1035,  183,  183,  183,  183, 1032,
     1033,  183, 1034,  183,  183,  183,  183,  183,  778,  183,

      183,  183,  183,  183, 1036, 1037,  183,  183, 1038, 1039,
      779, 1035, 1040,  183,  183, 1105,  183, 1041,  183,  183,
     1105,  183,  780,  183, 1042,  778,  183,  782, 1043,  183,
      183, 1036, 1037,  183,  183, 1038, 1039,  779,  183, 1040,
     1044,  183,  183,  183, 1041, 1045,  183,  183,  183,  780,
      183, 1042,  183, 1046,  782, 1043,  183,  781,  183,  183,
     1105, 1047,  183,  183, 1105,  183, 1105, 1044,  183,  183,
     1105, 1105, 1045,  183,  183,  183, 1048,  183, 1069,  183,
     1046,  183, 1070,  183,  781,  183,  183,  183, 1047,  183,
      183,  183,  783,  183,  183,  183,  784,  183,  183, 1105,

      183,  183,  183, 1048,  183, 1069, 1105, 1105,  183, 1070,
      183, 1071,  183, 1072,  183, 1105,  183,  183,  183,  783,
      183,  183,  183,  784,  183,  183,  183,  785,  183,  183,
     1073,  183,  183,  183,  183, 1074, 1105,  183, 1071,  183,
     1072, 1105,  786,  183,  183,  183,  183, 1075, 1076,  183,
     1105,  183,  183,  183,  785,  183,  183, 1073,  183,  183,
      183,  183, 1074,  183,  183, 1105,  183,  183,  788,  786,
      183,  183,  183,  183, 1075, 1076,  183,  183,  183,  183,
      787, 1077,  183,  183, 1105,  183,  183,  183,  183,  790,
      183,  183,  183,  183,  183,  788,  183,  183,  183,  183,

      791,  183, 1087,  183,  183, 1088,  183,  787, 1077,  183,
      792,  789,  183,  183,  183,  183,  790,  183, 1089,  183,
     1105,  793, 1090,  183,  183, 1105,  183,  791,  183, 1087,
      183,  183, 1088,  183, 1091, 1097,  183,  792,  789,  183,
      794, 1099,  183,  183,  183, 1089,  183,  183,  793, 1090,
     1101,  183,  183,  183, 1103,  183, 1105, 1105,  183, 1105,
      183, 1091, 1097, 1105, 1105,  183,  183,  794, 1099,  183,
      183, 1105, 1105,  183,  183, 1105,  183, 1101,  183,  183,
      183, 1103,  183,  183,  183, 1105,  183,  183,  183, 1105,
     1105,  183,  183, 1105, 1105, 1105,  183,  183, 1105,  183,

      183, 1105,  183,  183,  183,  183, 1105,  183,  795,  183,
      183,  183,  183,  183, 1105,  183, 1105, 1105,  183, 1105,
     1105, 1105, 1105,  183,  183, 1105,  183,  183, 1105,  183,
      796,  183,  183,  183,  183,  795,  183,  183, 1105,  183,
     1105,  183,  183, 1105, 1105,  183, 1105,  800,  799, 1105,
     1105,  183, 1105, 1105,  183, 1105, 1105,  796, 1105,  183,
      183, 1105, 1105, 1105,  183, 1105, 1105,  183,  183,  183,
      797, 1105,  183, 1105,  800,  799, 1105,  183,  183,  183,
      183,  183,  183,  183,  801, 1105, 1105,  183,  798,  183,
     1105,  183,  183,  183,  183,  802, 1105,  797,  183, 1105,

     1105,  183, 1105, 1105,  183,  183,  183,  183,  183,  183,
      183,  801, 1105, 1105,  183,  798,  183,  804,  183,  183,
      183,  183,  802,  803,  183,  183,  183, 1105,  183, 1105,
     1105,  183,  183, 1105,  183,  183, 1105,  183,  183,  183,
     1105,  183, 1105,  805,  804, 1105,  183,  183,  183, 1105,
      803,  183, 1105,  183, 1105,  183, 1105, 1105,  183,  806,
     1105,  183,  183,  183,  183,  183,  183, 1105,  183,  183,
      805,  183, 1105,  183,  183,  183,  807,  183,  183,  183,
     1105,  183,  183, 1105,  183, 1105,  806,  183, 1105,  183,
      183,  183, 1105, 1105,  183,  808,  183, 1105,  183,  809,

     1105, 1105,  183,  807,  183,  183,  183, 1105,  183,  183,
     1105,  183, 1105,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  808,  183, 1105,  183,  809, 1105, 1105,  810,
      820,  183, 1105,  183, 1105,  183,  183,  183,  183, 1105,
      183,  183,  183,  183,  183,  811,  183,  183,  183, 1105,
      183, 1105,  183, 1105, 1105,  183,  810,  820,  183, 1105,
      183, 1105,  183,  183,  183,  183,  183,  183,  183,  812,
      183,  183,  811,  813,  183,  183, 1105,  814,  183,  183,
      183,  183,  183,  183, 1105, 1105,  183, 1105,  183, 1105,
      183, 1105,  183,  183,  183,  183,  812,  183,  183, 1105,

      813,  183, 1105, 1105,  814,  183,  183,  183,  183, 1105,
      183, 1105, 1105,  183,  183,  183,  816, 1105,  183,  183,
      183,  815,  183,  183,  183, 1105,  818, 1105,  817, 1105,
      183,  183, 1105,  183,  183, 1105,  183, 1105, 1105, 1105,
     1105,  183, 1105,  816,  183,  183,  183,  183,  815, 1105,
      183,  183, 1105,  818,  183,  817,  183,  183,  183, 1105,
      183,  183,  831,  183,  183, 1105,  183, 1105,  819,  183,
      183,  183, 1105,  183,  183,  183,  183,  183,  183, 1105,
     1105,  183,  183,  183,  183,  183, 1105, 1105, 1105,  831,
     1105,  183, 1105,  183, 1105,  819,  183,  183, 1105, 1105,

     1105,  183,  183,  183,  183,  183, 1105, 1105,  824,  183,
      183,  183,  183,  821,  183, 1105,  183,  183,  183, 1105,
      822, 1105,  183,  183,  825, 1105, 1105, 1105, 1105,  183,
      183,  823,  183, 1105,  183,  824,  183,  183,  826,  183,
      821,  183, 1105,  183,  183,  183, 1105,  822,  827,  183,
      183,  825, 1105,  183, 1105, 1105,  183,  183,  823,  183,
     1105,  183,  183,  183,  183,  826,  183,  183,  183,  183,
      828, 1105,  829,  183,  183,  827, 1105, 1105,  183, 1105,
      183, 1105, 1105,  183,  183,  183,  832,  183, 1105,  183,
      183,  183, 1105, 1105,  183,  183,  183,  828, 1105,  829,

      183,  183,  183,  183, 1105,  183, 1105, 1105,  830, 1105,
      183,  183,  183,  832,  183, 1105,  183,  183,  183, 1105,
      183, 1105,  183,  183,  183, 1105, 1105,  183, 1105,  183,
      183, 1105,  183, 1105, 1105,  830, 1105, 1105,  833,  183,
      183,  183, 1105,  183, 1105,  183, 1105,  183, 1105,  183,
      183,  183, 1105,  834,  183,  183, 1105,  183, 1105,  183,
      183,  183,  183, 1105, 1105,  833,  183,  183,  183, 1105,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      834, 1105,  183, 1105,  183, 1105, 1105,  183,  183,  183,
      183,  183,  183, 1105, 1105, 1105, 1105,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      900,  183, 1105,  183,  183,  183,  183,  183,  183,  183,
      183, 1105, 1105, 1105, 1105, 1105,  183,  183,  894,  183,
      895, 1105, 1105,  183,  183,  183,  183,  900,  183, 1105,
      183,  183,  183,  183,  896,  897,  183,  183,  183,  183,
     1105,  183,  183,  183,  183,  894,  183,  895, 1105, 1105,
      183, 1105,  183, 1105,  183,  183,  183, 1105, 1105,  183,
     1105,  896,  897,  183, 1105,  183,  183,  898,  183,  183,
      899,  183,  183, 1105, 1105,  183, 1105, 1105,  183,  183,
     1105,  183,  183,  183, 1105, 1105,  183,  183, 1105,  902,

     1105,  183, 1105,  183,  898, 1105,  183,  899,  183,  183,
     1105,  901,  183, 1105, 1105,  183,  183,  183,  183,  183,
      183, 1105, 1105,  183,  183, 1105,  902, 1105,  183, 1105,
      183, 1105, 1105,  183, 1105,  183,  183,  183,  901,  903,
     1105, 1105,  183,  183,  183,  183,  183,  183, 1105, 1105,
      183,  904,  183, 1105, 1105,  183,  183,  183,  183,  905,
     1105,  906,  183,  183,  183,  183,  903,  183,  183,  183,
     1105,  183,  183, 1105,  183, 1105, 1105, 1105,  904,  183,
     1105,  183,  183,  183,  183,  183,  905,  183,  906,  183,
     1105, 1105,  183,  183,  183,  183,  183, 1105,  183,  183,

      183,  183,  908, 1105,  907, 1105,  909,  183,  183,  183,
      183, 1105,  183,  183,  183,  910,  183, 1105, 1105,  183,
      183, 1105,  183,  183, 1105, 1105,  183,  183, 1105,  908,
     1105,  907, 1105,  909,  183,  183,  183,  183, 1105,  183,
      183,  183,  910,  183, 1105,  183,  183,  183,  183,  183,
      183, 1105,  183,  183,  183, 1105,  911, 1105,  912,  913,
     1105,  183,  183,  183,  183, 1105, 1105, 1105,  183,  183,
      183, 1105,  183,  914,  183,  183,  183,  183, 1105,  183,
     1105,  183, 1105,  911, 1105,  912,  913, 1105,  183,  183,
      183,  183, 1105, 1105,  183,  183,  183, 1105,  183,  183,

      914,  183,  915,  183,  183, 1105, 1105, 1105,  183, 1105,
     1105,  183, 1105, 1105,  183,  183,  183, 1105, 1105, 1105,
     1105,  183,  183, 1105,  183,  183,  183, 1105,  183,  915,
      183,  183,  916, 1105,  183,  183, 1105,  183,  183, 1105,
      183,  183,  183, 1105, 1105, 1105, 1105, 1105,  183, 1105,
      183,  183,  917, 1105,  183,  183, 1105,  183, 1105,  916,
     1105,  183,  183, 1105,  183, 1105,  183,  183,  918,  183,
     1105, 1105,  183, 1105, 1105,  183,  183,  183,  183,  917,
      183,  183,  183,  921,  183, 1105,  183,  183,  183,  183,
     1105, 1105, 1105,  183,  183,  918,  183, 1105,  183,  183,

     1105,  183,  920,  183,  183,  183,  183,  183, 1105,  183,
      921,  183,  183,  183,  183,  183,  183, 1105,  919,  183,
     1105,  183,  183, 1105, 1105,  183, 1105, 1105,  183,  920,
      922,  183,  183,  183, 1105, 1105,  183,  183, 1105,  183,
     1105, 1105,  183,  183, 1105,  919,  183, 1105,  183,  183,
      183,  183, 1105,  183,  923,  183,  183,  922,  183,  183,
      183,  183, 1105,  183,  183, 1105,  183, 1105, 1105,  183,
     1105, 1105,  924, 1105, 1105,  183,  183,  183,  183,  183,
      183,  923,  183,  183, 1105,  183, 1105,  183,  183, 1105,
      183,  926,  183,  183,  183, 1105, 1105, 1105,  183,  924,

      183,  183,  925,  183,  183,  183,  183,  183, 1105, 1105,
     1105,  183,  183, 1105,  183, 1105, 1105, 1105,  926,  183,
      183,  183, 1105, 1105, 1105,  183,  183,  183,  183,  925,
      183,  183,  183,  183,  183,  183, 1105, 1105,  183,  183,
     1105,  183,  927, 1105,  183, 1105,  183,  183, 1105,  183,
     1105, 1105, 1105,  183,  183,  183,  183,  183,  183, 1105,
      183, 1105,  183,  928,  183,  183,  183, 1105,  183,  927,
     1105,  183, 1105,  183,  183,  183,  183, 1105, 1105, 1105,
      183,  183,  183,  183, 1105,  183,  183,  183, 1105, 1105,
      928,  183,  183,  183, 1105,  183,  929,  183, 1105, 1105,

      183,  183,  183,  183, 1105,  183, 1105,  183, 1105,  930,
      183, 1105,  183,  183,  183, 1105,  183, 1105,  183, 1105,
     1105, 1105,  931,  929,  183,  183, 1105,  183, 1105, 1105,
      183,  932,  183, 1105,  934,  183,  930,  183,  183,  183,
      183, 1105, 1105,  183,  933,  183,  183,  183,  183,  931,
      183,  183,  183,  183,  183,  183, 1105, 1105,  932, 1105,
      183,  934,  183, 1105, 1105,  183,  183,  183, 1105,  183,
     1105,  933,  183,  183,  183,  183,  936,  183,  183,  183,
      183,  183,  183,  183, 1105, 1105, 1105,  183,  935,  183,
      183, 1105,  183,  183, 1105, 1105,  183,  937,  183,  183,

      938, 1105,  183,  936, 1105,  183,  183, 1105, 1105, 1105,
      183, 1105, 1105, 1105,  183,  935,  183,  183,  183,  183,
      183,  183,  183, 1105,  937,  183,  183,  938,  183,  183,
      183, 1105,  183,  939,  940, 1105, 1105,  183,  183, 1105,
     1105,  183, 1105, 1105,  183,  183, 1105,  183,  183,  183,
     1105, 1105,  183,  183, 1105,  183,  183,  183,  941,  183,
      939,  940, 1105, 1105,  183,  183,  942, 1105,  183, 1105,
      183,  183,  943,  183, 1105, 1105, 1105,  183,  183,  183,
     1105, 1105,  183,  183, 1105,  941,  183,  944, 1105, 1105,
     1105,  183,  945,  942,  183,  183,  183,  183, 1105,  943,

      183, 1105, 1105, 1105,  183,  183,  183,  183, 1105,  183,
      183, 1105,  183,  183,  944, 1105,  183,  183,  183,  945,
     1105,  183,  946,  183, 1105, 1105,  183,  947,  183,  183,
     1105, 1105,  183,  183,  183,  183, 1105,  183, 1105,  183,
      183, 1105,  183,  183,  183,  183, 1105,  948,  183,  946,
     1105, 1105,  183,  183,  947,  183,  183,  183, 1105,  183,
      949,  183,  183, 1105,  183,  183, 1105,  183,  183,  183,
     1105,  183,  183,  183,  948,  183,  951, 1105,  950,  183,
      183,  183, 1105,  183,  183, 1105, 1105,  949,  183, 1105,
      183,  183,  183, 1105,  183,  183,  183,  183,  183,  952,

      183,  183, 1105,  951,  183,  950,  992,  183,  183, 1105,
      183,  183, 1105,  183, 1105,  183,  183,  183, 1105,  183,
      183,  183,  183,  183,  183,  991,  952, 1105,  183,  183,
     1105,  183,  183,  992, 1105, 1105, 1105, 1105,  183, 1105,
      183, 1105,  183,  183, 1105,  183,  183,  183,  183,  183,
     1105,  183,  991,  183, 1105,  183,  183,  993,  183,  183,
     1105,  994,  183,  183,  183,  183,  183,  183,  183, 1105,
     1105,  183,  183, 1105, 1105, 1105,  183, 1105,  183, 1105,
      183,  183,  183, 1105,  993,  183, 1105, 1105,  994,  183,
      183,  183,  183,  183,  183,  183, 1105,  183,  183,  183,

      996, 1105,  183,  183,  995, 1105, 1105,  183,  183,  183,
     1105,  183,  183,  183, 1105, 1105, 1105, 1105,  183, 1105,
     1105, 1105, 1105,  183,  183, 1105,  183,  996, 1105,  183,
     1105,  995, 1105, 1105,  183,  998,  183, 1105,  183,  183,
      183,  183,  997,  183,  183,  183,  183,  183,  183,  183,
      183,  183, 1105,  183,  183,  999,  183, 1105, 1105,  183,
     1105, 1105,  998, 1105, 1105,  183, 1105,  183,  183,  997,
      183,  183,  183,  183,  183,  183,  183,  183,  183, 1105,
      183,  183,  999,  183, 1105, 1105,  183, 1000,  183, 1105,
      183, 1105,  183, 1105,  183,  183,  183, 1105,  183,  183,

      183, 1105, 1105,  183,  183, 1105, 1105, 1105,  183,  183,
     1105,  183, 1105, 1105, 1000,  183,  183,  183, 1105, 1105,
     1105,  183,  183,  183, 1105,  183, 1105,  183, 1105, 1105,
      183, 1105,  183, 1105,  183,  183,  183, 1105,  183,  183,
      183, 1105,  183,  183,  183, 1105, 1105,  183,  183, 1105,
     1001, 1105,  183, 1105,  183, 1105,  183,  183, 1105,  183,
      183,  183, 1105,  183, 1105, 1105,  183,  183, 1105,  183,
      183,  183, 1105,  183,  183, 1002,  183, 1001, 1105,  183,
      183,  183, 1105,  183,  183,  183,  183,  183,  183,  183,
      183,  183, 1105,  183, 1105, 1105,  183,  183,  183, 1105,

      183,  183, 1002,  183,  183, 1105, 1105,  183,  183, 1105,
      183,  183,  183,  183,  183,  183,  183,  183,  183, 1105,
      183, 1105,  183,  183, 1003,  183,  183, 1105,  183,  183,
      183,  183, 1105, 1105, 1105,  183, 1105,  183,  183, 1005,
      183,  183,  183,  183,  183, 1105,  183, 1105,  183,  183,
     1105, 1003, 1004,  183,  183,  183,  183,  183,  183,  183,
     1105,  183, 1105,  183, 1105, 1105, 1005,  183, 1105,  183,
      183, 1105, 1105,  183,  183,  183, 1105, 1006, 1105, 1004,
     1105,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183, 1105, 1105, 1105,  183, 1105, 1105, 1105, 1105, 1007,

     1105,  183,  183, 1105, 1006, 1105,  183, 1105, 1105, 1011,
      183,  183, 1105, 1105,  183, 1105,  183, 1105, 1105, 1105,
     1105,  183,  183, 1105, 1014, 1105, 1007, 1008,  183,  183,
      183,  183, 1012,  183, 1009, 1105, 1011,  183, 1105, 1105,
     1105, 1105,  183, 1105,  183, 1010,  183, 1105, 1105,  183,
      183, 1014,  183,  183, 1008,  183,  183,  183,  183, 1012,
     1105, 1009,  183,  183,  183, 1105, 1105,  183, 1105,  183,
     1105,  183, 1010,  183, 1105, 1105, 1105,  183,  183,  183,
      183,  183,  183,  183, 1105,  183, 1013,  183,  183,  183,
      183, 1105, 1105, 1105,  183, 1016,  183,  183, 1015, 1105,

      183,  183, 1105,  183,  183,  183, 1105, 1105,  183,  183,
     1105, 1105,  183, 1013,  183,  183,  183,  183, 1105, 1105,
     1105, 1105, 1016,  183,  183, 1015, 1105,  183,  183, 1105,
      183,  183, 1105,  183,  183,  183,  183, 1105, 1105, 1105,
     1017,  183, 1105,  183,  183,  183,  183,  183, 1105, 1018,
     1105, 1105, 1105, 1105,  183, 1105, 1105, 1105, 1105,  183,
      183,  183,  183,  183, 1105, 1105, 1105, 1017,  183, 1105,
     1105, 1105,  183,  183,  183,  183, 1018,  183, 1019, 1020,
      183,  183,  183, 1105, 1105,  183,  183,  183, 1105,  183,
      183,  183, 1105,  183, 1105, 1105,  183, 1105, 1105,  183,

      183,  183,  183, 1105,  183, 1019, 1020,  183, 1105,  183,
     1021, 1105,  183, 1105,  183,  183,  183,  183,  183,  183,
      183, 1105, 1105,  183,  183, 1105,  183,  183,  183, 1022,
      183,  183, 1105,  183, 1105,  183,  183, 1021, 1023,  183,
      183,  183,  183,  183, 1105, 1105,  183,  183,  183,  183,
     1105,  183, 1105, 1024,  183, 1025, 1022,  183,  183,  183,
      183, 1105,  183,  183, 1105, 1023,  183,  183,  183, 1105,
      183,  183, 1105,  183,  183,  183,  183,  183,  183,  183,
     1024,  183, 1025,  183,  183, 1105,  183, 1026,  183,  183,
     1105,  183,  183, 1105,  183,  183, 1105, 1105,  183, 1105,

      183, 1105, 1105, 1105,  183,  183,  183,  183,  183, 1105,
      183,  183, 1105,  183, 1026,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183, 1105, 1105,  183, 1105, 1105,
     1028, 1105,  183,  183,  183,  183, 1027, 1105,  183,  183,
      183, 1105,  183,  183,  183,  183, 1049,  183,  183, 1105,
      183,  183,  183, 1105,  183,  183, 1105, 1028,  183,  183,
      183, 1105, 1105, 1027, 1105,  183,  183,  183,  183,  183,
      183,  183,  183, 1049,  183,  183,  183,  183, 1105,  183,
      183,  183,  183,  183,  183,  183,  183,  183, 1105, 1105,
      183, 1105, 1105,  183,  183,  183,  183,  183,  183, 1105,

     1105,  183, 1105,  183,  183, 1050,  183,  183,  183,  183,
      183,  183,  183,  183,  183, 1105, 1105,  183, 1105, 1105,
      183, 1051, 1105,  183,  183,  183,  183, 1105, 1105, 1105,
      183, 1105, 1050,  183, 1105,  183,  183, 1105, 1105,  183,
      183,  183,  183, 1105,  183,  183,  183,  183, 1051, 1052,
      183,  183,  183,  183, 1105, 1105, 1105,  183, 1105,  183,
     1105,  183,  183, 1105, 1105,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183, 1052,  183,  183, 1105,
      183,  183,  183, 1105,  183,  183,  183, 1053,  183, 1105,
      183,  183,  183,  183,  183, 1105, 1105,  183, 1105,  183,

      183,  183,  183, 1105, 1105,  183,  183,  183,  183,  183,
     1105,  183,  183, 1105, 1053,  183, 1054,  183,  183, 1105,
      183,  183, 1105, 1105, 1105, 1105,  183,  183,  183,  183,
     1105, 1105,  183,  183,  183,  183,  183, 1105,  183, 1055,
      183,  183,  183, 1054,  183, 1105, 1057,  183,  183, 1105,
      183, 1056, 1105,  183, 1105, 1105,  183, 1105, 1105, 1105,
     1105,  183,  183,  183,  183,  183, 1055,  183,  183, 1105,
     1105,  183, 1058, 1057, 1105,  183,  183,  183, 1056,  183,
      183,  183,  183, 1105, 1105,  183, 1105, 1105,  183, 1105,
      183,  183,  183, 1105, 1059, 1105, 1105,  183, 1060, 1058,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
     1105, 1105,  183, 1105, 1105,  183, 1105,  183,  183,  183,
      183, 1059, 1105, 1105,  183, 1060,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183, 1105, 1105,  183,
      183, 1105,  183,  183,  183,  183,  183,  183,  183, 1105,
     1061,  183, 1105,  183,  183,  183,  183,  183,  183, 1062,
      183,  183,  183,  183,  183, 1105,  183,  183, 1105,  183,
      183,  183,  183,  183,  183,  183, 1105, 1061,  183, 1105,
      183,  183,  183,  183, 1063,  183, 1062,  183,  183, 1105,
      183,  183, 1105, 1105, 1105, 1105, 1065, 1064,  183,  183,

      183,  183,  183, 1105, 1105,  183, 1105,  183,  183, 1105,
     1105, 1063,  183, 1105,  183,  183, 1105,  183,  183, 1105,
     1105, 1105, 1105, 1065, 1064,  183,  183,  183, 1105,  183,
      183, 1105,  183,  183, 1067,  183,  183, 1105,  183,  183,
     1105,  183,  183, 1105,  183,  183, 1105, 1105,  183, 1105,
     1066,  183, 1105,  183,  183, 1105, 1105,  183, 1105, 1105,
      183, 1067,  183,  183, 1105,  183,  183, 1105,  183,  183,
     1105,  183, 1105, 1105, 1105,  183, 1105, 1066,  183, 1068,
      183,  183,  183, 1105,  183, 1105,  183,  183,  183,  183,
     1105, 1105,  183,  183,  183,  183,  183, 1105, 1078, 1105,

      183,  183, 1105, 1105, 1105, 1105, 1068,  183,  183,  183,
     1105,  183, 1105,  183,  183,  183, 1105, 1105,  183,  183,
     1105,  183,  183, 1105,  183, 1078,  183,  183,  183,  183,
      183, 1105,  183,  183,  183,  183,  183,  183, 1079,  183,
     1105,  183,  183, 1105,  183,  183,  183, 1105, 1080,  183,
     1105,  183, 1105,  183, 1105, 1105,  183,  183, 1105,  183,
      183,  183,  183,  183,  183, 1079,  183, 1105,  183,  183,
      183,  183,  183,  183,  183, 1080,  183,  183, 1105, 1105,
      183,  183,  183,  183,  183, 1105, 1105,  183,  183,  183,
     1105, 1105, 1105, 1083, 1105, 1105, 1081,  183,  183,  183,

     1105,  183,  183,  183,  183, 1105, 1105,  183,  183,  183,
      183,  183,  183, 1105,  183,  183, 1105, 1082,  183,  183,
     1083, 1105, 1105, 1081,  183,  183,  183, 1105, 1105,  183,
      183,  183, 1105, 1105, 1105,  183,  183, 1105, 1105,  183,
      183, 1105, 1105,  183, 1082,  183,  183, 1084,  183,  183,
      183,  183,  183,  183, 1105,  183, 1105,  183,  183, 1105,
     1105,  183,  183,  183,  183,  183, 1105,  183, 1105,  183,
      183, 1105,  183, 1105, 1084,  183,  183,  183, 1105,  183,
     1105, 1105,  183,  183,  183, 1085, 1105,  183,  183, 1105,
      183,  183,  183,  183, 1086, 1105,  183,  183,  183,  183,

      183, 1105,  183,  183, 1105,  183, 1105, 1105, 1105, 1105,
      183, 1105, 1085,  183,  183,  183, 1105,  183,  183,  183,
      183, 1086,  183, 1105,  183,  183, 1105,  183, 1105,  183,
      183, 1105,  183, 1105,  183,  183, 1105, 1105,  183, 1105,
      183,  183,  183, 1092, 1093,  183,  183,  183,  183,  183,
      183,  183,  183, 1105,  183, 1105,  183, 1105, 1105,  183,
     1105,  183,  183,  183,  183,  183, 1094, 1105,  183,  183,
     1092, 1093,  183,  183,  183,  183,  183,  183,  183,  183,
     1105,  183, 1105,  183, 1105, 1105,  183, 1105,  183,  183,
      183,  183,  183, 1094,  183,  183,  183, 1105,  183,  183,

      183,  183, 1105,  183, 1105,  183, 1105,  183,  183, 1095,
     1105,  183, 1096,  183,  183,  183,  183,  183,  183,  183,
     1105,  183,  183,  183, 1105,  183, 1105, 1105,  183, 1105,
     1105, 1105,  183, 1105,  183,  183, 1095, 1105,  183, 1096,
      183,  183, 1105, 1105,  183,  183,  183, 1105,  183, 1105,
      183, 1105, 1105,  183,  183, 1098,  183,  183,  183,  183,
      183,  183,  183, 1105,  183, 1105,  183,  183, 1105,  183,
     1105, 1105,  183,  183, 1105,  183, 1105, 1105, 1105, 1105,
      183,  183, 1098,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183, 1105,  183,  183,  183,  183,

      183, 1105,  183, 1105,  183,  183, 1102, 1105, 1100, 1105,
      183,  183,  183, 1105, 1105,  183,  183,  183, 1105,  183,
     1105, 1105, 1105, 1105,  183,  183, 1105,  183,  183,  183,
     1105,  183,  183, 1102, 1105, 1100, 1105,  183,  183,  183,
     1105, 1105,  183,  183,  183, 1105,  183,  183, 1105,  183,
     1105,  183, 1104, 1105,  183,  183,  183, 1105, 1105,  183,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105,  183, 1105,  183,  183, 1105,  183, 1105,  183, 1104,
     1105,  183, 1105,  183, 1105, 1105,  183,   80, 1105, 1105,
       80,   81, 1105,   81,   81,  170, 1105,  170,  170,  173,

     1105,  173,  173,  174, 1105,  174,  174,  183, 1105,  183,
      183,    5, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105
    } ;

static yyconst flex_int16_t yy_chk[7180] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    8,    8,   13, 1108,
       13,   15,   15,   16,   16,   18,   24,   18,  483,   20,
       19,  372,   24,   18,   19,   18,   20,   19,   27,   18,
       18,   21,   18,   20,   28,   21,   20,   20,  264,   21,
       19,  179,   18,   24,   18,   21,   20,   19,   21,   24,
       18,   19,   18,   20,   19,   27,   18,   18,   21,   18,
       20,   28,   21,   20,   20,   25,   21,   19,   49,   22,

       49,   22,   21,   25,   23,   21,   22,   23,   43,   43,
       23,   22,   26,   23,   29,   31,   23,   30,   29,   26,
       26,   30,   25,  178,   29,   26,   22,  174,   22,   31,
       25,   23,  173,   22,   23,   31,   31,   23,   22,   26,
       23,   29,   31,   23,   30,   29,   26,   26,   30,   32,
       39,   29,   26,   91,   33,   35,   31,   32,   39,   35,
       92,   32,   31,   31,   32,   33,   40,   40,   38,   95,
       38,   33,   86,   38,   44,   44,   32,   39,   51,   51,
       91,   33,   35,   85,   32,   39,   35,   92,   32,   52,
       52,   32,   33,   40,   40,   38,   95,   38,   33,   36,

       38,   36,   81,   60,   36,   78,   78,   60,   80,   36,
       60,   36,   36,   84,   84,   64,   60,  171,  171,   64,
      177,  177,   64,   60,   96,   66,   36,   77,   36,   66,
       60,   36,   66,   97,   60,   64,   36,   60,   36,   36,
       37,   37,   64,   60,   37,   66,   64,   37,   37,   64,
       60,   96,   66,   99,   37,  100,   66,   37,   53,   66,
       97,   50,   64,   48,   46,   45,   41,   37,   37,   17,
       14,   37,   66,   98,   37,   37,   12,  103,    9,    5,
       99,   37,  100,    0,   37,   54,   54,   98,   54,   54,
       54,   54,   54,   54,   93,   54,   54,   54,   70,  106,

       98,   54,   93,   54,  103,   63,   70,   63,   63,   54,
       70,   54,   63,   70,   98,   54,   54,   63,   54,   94,
      102,   93,   94,  107,    0,   70,  106,  102,   54,   93,
       54,    0,   63,   70,   63,   63,   54,   70,   54,   63,
       70,    0,   54,   54,   63,   54,   94,  102,  110,   94,
      107,   54,   55,   55,  102,   55,   55,   55,   55,   55,
       55,   65,   55,   55,   55,   65,   61,  111,   65,   55,
       61,   65,  105,   55,   61,  110,   55,   61,  104,  112,
      104,   65,  105,  109,  109,  113,  114,  116,   65,   55,
       61,    0,   65,   61,  111,   65,   55,   61,   65,  105,

       55,   61,  117,   55,   61,  104,  112,  104,   65,  105,
      109,  109,  113,  114,  116,  118,   55,   61,   55,   56,
      119,   71,  120,   56,  121,   71,   56,   56,   71,  117,
       56,  122,  123,   56,  124,  123,   56,   56,    0,  124,
        0,   71,  118,   56,    0,    0,   56,  119,   71,  120,
       56,  121,   71,   56,   56,   71,  126,   56,  122,  123,
       56,  124,  123,   56,   56,   74,  124,   74,   71,   74,
       56,   57,   74,  128,  129,   57,   75,   74,  130,   57,
       75,    0,   57,  126,   75,   57,    0,  131,   57,  132,
       75,  132,   74,   75,   74,   57,   74,    0,   57,   74,

      128,  129,   57,   75,   74,  130,   57,   75,  108,   57,
        0,   75,   57,  108,  131,   57,  132,   75,  132,  108,
       75,   76,   57,   58,   76,   76,  108,   58,   76,  135,
       58,  134,   58,  136,    0,  108,    0,   58,  137,  138,
      108,   76,   58,   58,    0,  134,  108,    0,   76,  139,
       58,   76,   76,  108,   58,   76,  135,   58,  134,   58,
      136,  115,  140,  115,   58,  137,  138,  115,   76,   58,
       58,   59,  134,  142,  115,   59,  139,  143,   59,    0,
        0,   59,  144,  145,   59,    0,    0,   59,  115,  140,
      115,   59,    0,  133,  115,  133,    0,  127,   59,    0,

      142,  115,   59,  148,  143,   59,  133,  127,   59,  144,
      145,   59,  127,  127,   59,  149,    0,  146,   59,   62,
      133,  146,  133,  147,  127,   62,   62,   62,  147,  151,
      148,  152,   62,  133,  127,  150,  153,   62,    0,  127,
      127,  154,  149,  150,  146,  155,   62,  156,  146,    0,
      147,  158,   62,   62,   62,  147,  151,  160,  152,   62,
      157,  161,  150,  153,   62,   67,  159,  159,  154,  163,
      150,  157,  155,   67,  156,  164,   67,    0,  158,   67,
      167,  168,   67,  165,  160,   67,   67,  157,  161,  165,
        0,    0,   67,  159,  159,    0,  163,  266,  157,    0,

       67,  162,  164,   67,  162,  166,   67,  167,  168,   67,
      165,  162,   67,   67,   68,    0,  165,   68,  166,  268,
       68,  269,   68,   68,  266,  271,   68,    0,  162,   68,
        0,  162,  166,    0,    0,  183,  273,    0,  162,  183,
      187,   68,  183,  187,   68,  166,  268,   68,  269,   68,
       68,  274,  271,   68,  187,  183,   68,   69,  275,  276,
      187,  187,  183,  273,  188,   69,  183,  187,   69,  183,
      187,   69,  188,  277,   69,  278,  188,   69,  274,  188,
        0,  187,  183,    0,   69,  275,  276,  187,  187,    0,
        0,  188,   69,    0,  280,   69,    0,  281,   69,  188,

      277,   69,  278,  188,   69,   72,  188,   72,  190,  282,
       72,   72,  283,  284,   72,   72,  190,   72,   72,    0,
      190,  280,  190,  190,  281,  184,  184,   72,    0,    0,
      184,  286,   72,  184,   72,  190,  282,   72,   72,  283,
      284,   72,   72,  190,   72,   72,  184,  190,  287,  190,
      190,  288,  184,  184,   72,   73,   73,  184,  286,   73,
      184,  185,   73,   73,    0,  185,  290,    0,  185,   73,
      291,    0,   73,  184,    0,  287,  185,  279,  288,  279,
        0,  185,   73,   73,  292,    0,   73,  186,  185,   73,
       73,  186,  185,  290,  186,  185,   73,  291,  189,   73,

        0,  189,  186,  185,  279,    0,  279,  186,  185,  189,
      293,  292,  191,  189,  186,    0,  189,  289,  186,    0,
      191,  186,    0,  294,  191,  189,  191,  191,  189,  186,
      192,  192,  289,    0,  186,  193,  189,  293,  192,  191,
      189,    0,  192,  189,  289,  192,  194,  191,    0,  193,
      294,  191,  295,  191,  191,  193,  193,  192,  192,  289,
      194,  297,  193,  298,  196,  192,  194,  194,  195,  192,
      195,    0,  192,  194,  299,  195,  193,    0,  196,  295,
      195,    0,  193,  193,  196,  196,  300,  194,  297,  301,
      298,  196,  302,  194,  194,  195,  197,  195,  197,  303,

      198,  299,  195,  197,  198,  196,  305,  195,  197,    0,
      306,  196,  196,  300,  198,    0,  301,  307,  199,  302,
      198,  198,    0,  197,  308,  197,  303,  198,    0,    0,
      197,  198,  199,  305,    0,  197,  200,  306,  199,  199,
      203,  198,  209,    0,  307,  199,  209,  198,  198,  209,
      200,  308,  309,    0,  203,  200,  200,  200,    0,  199,
      203,  203,  209,  200,  310,  199,  199,  203,  202,  209,
      202,    0,  204,  209,  202,  202,  209,  200,  311,  309,
      202,  203,  200,  200,  200,  201,  204,  203,  203,  209,
      201,  310,  204,  204,  312,  202,  201,  202,  201,  204,

      313,  202,  202,  201,  205,  311,  205,  202,  201,    0,
      314,  205,  201,  204,  206,  315,  205,  201,    0,  204,
      204,  312,  206,  201,  206,  201,  316,  313,  318,  206,
      201,  205,  319,  205,  206,  201,  207,  314,  205,  321,
      317,  206,  315,  205,  322,  207,  323,  207,  210,  206,
      317,  206,  207,  316,  324,  318,  206,  207,    0,  319,
        0,  206,  210,  207,    0,  325,  321,  317,  210,  210,
        0,  322,  207,  323,  207,  210,    0,  317,  211,  207,
        0,  324,    0,  212,  207,  208,  211,  208,  326,  210,
      211,  208,  325,  211,  208,  210,  210,  212,  208,    0,

        0,  327,  213,  212,  212,  211,  213,  208,    0,  213,
      212,    0,  208,  211,  208,  326,    0,  211,  208,    0,
      211,  208,  213,  214,  212,  208,  215,  224,  327,  213,
      212,  212,    0,  213,  208,  224,  213,  214,  216,  224,
      215,  328,  224,  214,  214,  329,  215,  215,    0,  213,
      214,  330,  216,  215,  224,    0,  216,  332,  216,  216,
        0,    0,  224,    0,  214,  216,  224,  215,  328,  224,
      214,  214,  329,  215,  215,  217,  333,  217,  330,  216,
      334,  335,  217,  216,  332,  216,  216,  217,  218,  219,
      218,  219,    0,  219,    0,  218,  219,  336,    0,    0,

      218,  219,  217,  333,  217,  338,  337,  334,  335,  217,
        0,    0,    0,  339,  217,  218,  219,  218,  219,  221,
      219,  221,  218,  219,  336,  337,  221,  218,  219,  220,
        0,  221,  338,  337,  222,    0,    0,  220,  222,  220,
      339,  222,  340,  223,  220,  220,  221,  223,  221,  220,
      223,    0,  337,  221,  222,  240,  220,  240,  221,  341,
      342,  222,  240,  223,  220,  222,  220,  240,  222,  340,
      223,  220,  220,    0,  223,    0,  220,  223,  227,    0,
      227,  222,  240,    0,  240,  228,  341,  342,  227,  240,
      223,  225,  227,  228,  240,  227,  225,  228,  225,  225,

      228,    0,  229,  225,  343,  227,  225,  227,    0,    0,
      229,    0,  228,  344,  229,  227,  229,  229,  225,  227,
      228,    0,  227,  225,  228,  225,  225,  228,  231,  229,
      225,  343,  231,  225,  226,  231,  226,  229,  230,  226,
      344,  229,  345,  229,  229,  347,  230,  226,  231,  348,
      230,  226,  230,  230,  226,  231,  349,    0,    0,  231,
      350,  226,  231,  226,  351,  230,  226,  353,  232,  345,
        0,    0,  347,  230,  226,  231,  348,  230,  226,  230,
      230,  226,  232,  349,  233,  234,  354,  350,  232,  232,
      237,  351,  233,  234,  353,  232,  233,  234,  237,  233,

      234,  355,  237,    0,  235,  237,  235,    0,    0,  232,
        0,  233,  234,  354,  235,  232,  232,  237,  235,  233,
      234,  235,  236,  233,  234,  237,  233,  234,  355,  237,
      236,  235,  237,  235,  236,  239,  236,  236,  238,  239,
      356,  235,  239,  357,    0,  235,  359,  361,  235,  236,
      362,    0,  238,  363,  364,  239,    0,  236,  238,  238,
      365,  236,  239,  236,  236,  238,  239,  356,  366,  239,
      357,  241,    0,  359,  361,    0,  241,  362,  241,  238,
      363,  364,  239,  241,  367,  238,  238,  365,  241,    0,
      242,    0,    0,    0,  242,  366,  242,    0,  241,  244,

      243,  242,  243,  241,  245,  241,  242,  243,  243,    0,
      241,  367,  243,  244,    0,  241,  247,  242,  245,  244,
      244,  242,    0,  242,  245,  245,  244,  243,  242,  243,
      247,  245,    0,  242,  243,  243,  247,  247,  368,  243,
      244,  246,  360,  247,  360,  245,  244,  244,  249,  246,
      249,  245,  245,  246,  370,  249,  246,  247,  248,  248,
      249,    0,    0,  247,  247,  368,  369,    0,  246,  360,
      369,  360,  248,    0,    0,  249,  246,  249,  248,  248,
      246,  370,  249,  246,    0,  248,  248,  249,  250,  250,
      250,    0,  479,  369,  251,  250,    0,  369,  251,  248,

      250,  251,  480,    0,  481,  248,  248,    0,  482,    0,
        0,  252,  252,  252,  251,  250,  250,  250,  252,  479,
        0,  251,  250,  252,    0,  251,    0,  250,  251,  480,
      253,  481,  253,  254,  253,  482,  256,  253,  252,  252,
      252,  251,  253,  484,  256,  252,  256,  254,  257,  485,
      252,  256,  257,  254,  254,  257,  256,  253,  486,  253,
      254,  253,  255,  256,  253,  255,    0,  255,  257,  253,
      484,  256,  255,  256,  254,  257,  485,  255,  256,  257,
      254,  254,  257,  256,    0,  486,    0,  489,  492,  255,
      493,    0,  255,  258,  255,  257,    0,  258,  259,  255,

      258,  494,  259,  260,  255,  259,  258,  260,  495,  496,
      260,  259,    0,  258,  489,  492,    0,  493,  259,    0,
      258,    0,    0,  260,  258,  259,    0,  258,  494,  259,
      260,  497,  259,  258,  260,  495,  496,  260,  259,  261,
      258,  498,    0,  261,  373,  259,  261,  499,  373,  374,
      260,  373,  500,  374,  261,  502,  374,  503,  497,  261,
      504,  507,    0,    0,  373,    0,  261,    0,  498,  374,
      261,  373,    0,  261,  499,  373,  374,    0,  373,  500,
      374,  261,  502,  374,  503,  375,  261,  504,  507,  375,
      376,  373,  375,    0,  376,  377,  374,  376,    0,  377,

      378,  508,  377,    0,  378,  375,  509,  378,    0,  510,
      376,  511,  375,    0,  513,  377,  375,  376,    0,  375,
      378,  376,  377,    0,  376,  379,  377,  378,  508,  377,
      380,  378,  375,  509,  378,  381,  510,  376,  511,  379,
      382,  513,  377,    0,  380,  379,  379,  378,  516,  381,
      380,  380,  379,  517,  382,  381,  381,  380,  519,  521,
      382,  382,  381,    0,    0,    0,  379,  382,    0,    0,
      383,  380,  379,  379,    0,  516,  381,  380,  380,  522,
      517,  382,  381,  381,  383,  519,  521,  382,  382,  384,
      383,  383,  383,  384,    0,  386,  384,  383,  385,  386,

      523,  385,  386,  524,    0,  385,  522,  525,  385,  384,
        0,  383,    0,    0,  528,  386,  384,  383,  383,  383,
      384,  385,  386,  384,    0,  385,  386,  523,  385,  386,
      524,  387,  385,  387,  525,  385,  384,  387,  532,  388,
      387,  528,  386,    0,  389,  534,    0,  388,  385,    0,
      536,  388,  389,  387,  388,  537,  389,    0,  387,  389,
      387,  390,    0,    0,  387,  532,  388,  387,    0,  390,
      391,  389,  534,  390,  388,  390,  390,  536,  388,  389,
      387,  388,  537,  389,  391,    0,  389,  392,  390,  392,
      391,  391,    0,    0,  392,  526,  390,  391,    0,  392,

      390,  535,  390,  390,  538,  394,  526,  539,  393,  394,
      393,  391,  394,  541,  392,  393,  392,  391,  391,  535,
      393,  392,  526,  395,  396,  394,  392,  395,  535,    0,
      395,  538,  394,  526,  539,  393,  394,  393,  396,  394,
      541,  542,  393,  395,  396,  396,  535,  393,    0,  397,
      395,  396,  394,  397,  395,    0,  397,  395,    0,  543,
      544,  545,    0,  548,  397,  396,  549,    0,  542,  397,
      395,  396,  396,  398,  399,  398,  397,  441,  399,  398,
      397,  399,  398,  397,  550,  441,  543,  544,  545,  441,
      548,  397,  441,  549,  399,  398,  397,    0,  551,  552,

      398,  399,  398,  400,  441,  399,  398,  400,  399,  398,
      400,  550,  441,    0,  553,  554,  441,  401,  400,  441,
      401,  399,  398,  400,  401,  551,  552,  401,  402,  403,
      400,    0,  402,  403,  400,  402,  403,  400,  556,  402,
      401,  553,  554,  557,  401,  400,  558,  401,  402,  403,
      400,  401,    0,  559,  401,  402,  403,  404,  405,  402,
      403,  404,  402,  403,  404,  556,  402,  401,  560,  563,
      557,  565,  405,  558,  566,  402,  403,  404,  405,  405,
      559,  407,  406,  407,  404,  405,  406,  407,  404,  406,
      407,  404,    0,    0,    0,  560,  563,  567,  565,  405,

        0,  566,  406,  407,  404,  405,  405,  568,  407,  406,
      407,  569,    0,  406,  407,    0,  406,  407,  570,  408,
      409,  408,  409,  411,  567,  571,  408,  409,    0,  406,
      407,  408,  409,    0,  568,  410,    0,  411,  569,  410,
      572,  573,  410,  411,  411,  570,  408,  409,  408,  409,
      411,  575,  571,  408,  409,  410,    0,    0,  408,  409,
      412,  577,  410,  413,  411,    0,  410,  572,  573,  410,
      411,  411,  414,  681,  412,  413,  414,  413,  575,  414,
      412,  412,  410,  413,  413,    0,  415,  412,  577,  415,
      413,    0,  414,  415,    0,    0,  415,  683,    0,  414,

      681,  412,  413,  414,  413,    0,  414,  412,  412,  415,
      413,  413,  416,  415,  417,  684,  415,  685,  418,  414,
      415,  417,  418,  415,  683,  418,  416,  686,  417,  687,
      688,    0,  416,  416,  417,  417,  415,    0,  418,  416,
      689,  417,  684,  419,  685,  418,    0,  419,  417,  418,
      419,  690,  418,  416,  686,  417,  687,  688,  419,  416,
      416,  417,  417,  419,  420,  418,  421,  689,  420,  422,
      419,  420,    0,  422,  419,  692,  422,  419,  690,  420,
      421,  564,    0,  693,  420,  419,  421,  421,  564,  422,
      419,  420,  694,  421,  695,  420,  422,  423,  420,  564,

      422,  423,  692,  422,  423,  424,  420,  421,  564,  424,
      693,  420,  424,  421,  421,  564,  422,  423,  697,  694,
      426,  695,  698,  425,  423,  424,  564,  425,  423,  699,
      425,  423,  424,  425,  426,    0,  424,    0,  700,  424,
      426,  426,    0,  425,  423,  697,  427,  426,  427,  698,
      425,    0,  424,  427,  425,  701,  699,  425,  427,  430,
      425,  426,  428,  430,  428,  700,  430,  426,  426,  428,
      425,    0,  702,  427,  428,  427,  429,    0,  429,  430,
      427,    0,  701,  429,  429,  427,  430,  703,  429,  428,
      430,  428,    0,  430,  704,  706,  428,  708,  433,  702,

      431,  428,    0,  429,  431,  429,  430,  431,  432,  432,
      429,  429,  433,  432,  703,  429,  432,    0,  433,  433,
      431,  704,  706,    0,  708,  433,  709,  431,  437,  432,
        0,  431,    0,    0,  431,  432,  432,    0,  434,  433,
      432,    0,  437,  432,  434,  433,  433,  431,  437,  437,
      435,    0,  434,  709,  435,  437,  432,  435,  434,  434,
      436,  442,  436,  442,  436,  434,  710,  436,  442,  437,
      435,  434,    0,  442,  713,  437,  437,  435,  438,  434,
      436,  435,  439,  714,  435,  434,  434,  436,  442,  436,
      442,  436,  438,  710,  436,  442,  439,  435,  438,  438,

      442,  713,  439,  439,  440,  438,    0,  436,  440,  439,
      714,  440,  715,  443,  444,  716,  719,  443,  444,  438,
      443,  444,  720,  439,  440,  438,  438,    0,    0,  439,
      439,  440,    0,  443,  444,  440,  445,    0,  440,  715,
      443,  444,  716,  719,  443,  444,    0,  443,  444,  720,
      445,  440,  446,  721,  446,  445,  445,  445,  724,  446,
      443,  444,    0,  445,  446,  725,  447,    0,  447,  726,
      447,  729,    0,  447,  730,  731,  732,  445,  447,  446,
      721,  446,  445,  445,  445,  724,  446,  448,  448,  448,
      449,  446,  725,  447,  448,  447,  726,  447,  729,  448,

      447,  730,  731,  732,  449,  447,  733,  735,  450,  736,
      449,  449,    0,    0,  448,  448,  448,  449,    0,    0,
        0,  448,  450,  737,  738,  451,  448,  450,  450,  450,
        0,  449,  451,  733,  735,  450,  736,  449,  449,  451,
      452,  739,  740,  741,  452,  451,  451,  452,    0,  450,
      737,  738,  451,    0,  450,  450,  450,  453,  454,  451,
      452,  453,  454,  742,  453,  454,  451,  452,  739,  740,
      741,  452,  451,  451,  452,  455,  456,  453,  454,  455,
      456,  743,  455,  456,  453,  454,  744,  452,  453,  454,
      742,  453,  454,  455,  459,  455,  456,  745,  459,    0,

        0,  459,  455,  456,  453,  454,  455,  456,  743,  455,
      456,  457,  458,  744,  459,  457,  458,    0,  457,  458,
      455,  459,  455,  456,  745,  459,  457,  458,  459,  460,
        0,  457,  458,  460,    0,    0,  460,    0,  457,  458,
        0,  459,  457,  458,  461,  457,  458,  469,  461,  460,
      463,  461,  463,  457,  458,  461,  460,  463,  457,  458,
      460,  469,  463,  460,  461,  462,  464,  469,  469,  462,
      464,  461,  462,  464,  469,  461,  460,  463,  461,  463,
      462,  746,  461,  465,  463,  462,  464,  465,  469,  463,
      465,  461,  462,  464,  469,  469,  462,  464,  466,  462,

      464,  748,  466,  465,  467,  466,  467,  462,  746,    0,
      465,  467,  462,  464,  465,  470,  467,  465,  466,  470,
      468,    0,  470,    0,    0,  466,  749,  750,  748,  466,
      465,  467,  466,  467,  468,  470,  468,  471,  467,    0,
      468,  468,  470,  467,    0,  466,  470,  468,  472,  470,
      472,  471,  473,  749,  750,  472,    0,  471,  471,  751,
      472,  468,  470,  468,  471,    0,  473,  468,  468,  474,
      753,  474,  473,  473,    0,  472,    0,  472,  471,  473,
      754,  475,  472,  474,  471,  471,  751,  472,  755,  474,
      474,  835,  476,  473,  836,  475,  474,  753,  474,  473,

      473,  475,  475,  475,  838,  840,  476,  754,  475,    0,
      474,  476,  476,  476,  841,  755,  474,  474,  835,  476,
        0,  836,  475,    0,    0,  842,    0,  844,  475,  475,
      475,  838,  840,  476,  477,  478,  579,  478,  476,  476,
      476,  841,  477,  478,  579,  580,  477,  478,  579,  477,
      478,  579,  842,  580,  844,  845,    0,  580,    0,    0,
      580,  477,  478,  579,  478,  846,    0,  849,  853,  477,
      478,  579,  580,  477,  478,  579,  477,  478,  579,  581,
      580,  582,  845,  581,  580,  582,  581,  580,  582,  583,
      584,    0,  846,  583,  849,  853,  583,  855,  584,  581,

        0,  582,  584,  858,  861,  584,  581,    0,  582,  583,
      581,  583,  582,  581,  585,  582,  583,  584,  585,    0,
      583,  585,  862,  583,  855,  584,  581,  586,  582,  584,
      858,  861,  584,  864,  585,  586,  583,  865,  587,  586,
        0,  585,  586,  588,  867,  585,  587,    0,  585,  862,
      587,  588,  868,  587,  586,  588,  866,  870,  588,    0,
      864,  585,  586,  866,  865,  587,  586,  589,    0,  586,
      588,  867,  590,  587,  866,  591,    0,  587,  588,  868,
      587,  589,  588,  866,  870,  588,  590,  589,  589,  591,
      866,  592,  590,  590,  589,  591,  591,    0,  871,  590,

      872,  866,  591,  592,  874,  592,  875,  877,  589,  593,
      879,  592,  592,  590,  589,  589,  591,  593,  592,  590,
      590,  593,  591,  591,  593,  871,    0,  872,    0,    0,
      592,  874,  592,  875,  877,  594,  593,  879,  592,  592,
      881,    0,  882,  594,  593,  883,  884,  594,  593,  594,
      594,  593,  595,  596,  595,  596,  597,  885,  597,  595,
      596,  596,  594,  597,  595,  596,    0,  881,  597,  882,
      594,    0,  883,  884,  594,    0,  594,  594,  886,  595,
      596,  595,  596,  597,  885,  597,  595,  596,  596,  598,
      597,  595,  596,  600,  599,  597,  889,  598,  601,  892,

      893,  598,  599,    0,  598,  886,  599,  600,  599,  599,
      954,  959,  601,  600,  600,  960,  598,    0,  601,  601,
      600,  599,    0,  889,  598,  601,  892,  893,  598,  599,
      602,  598,  602,  599,  600,  599,  599,  954,  959,  601,
      600,  600,  960,    0,  602,  601,  601,    0,  603,  604,
      602,  602,  603,  604,  605,  603,  604,  602,  605,  602,
        0,  605,  962,  967,    0,  968,  606,    0,  603,  604,
      606,  602,    0,  606,  605,  603,  604,  602,  602,  603,
      604,  605,  603,  604,  969,  605,  606,  607,  605,  962,
      967,  607,  968,  606,  607,  603,  604,  606,  607,  608,

      606,  605,  609,  608,  970,  971,  608,  607,  972,  974,
      608,  969,  975,  606,  607,    0,  609,  978,  607,  608,
        0,  607,  609,  609,  980,  607,  608,  611,  982,  609,
      608,  970,  971,  608,  607,  972,  974,  608,  610,  975,
      983,  611,  612,  609,  978,  984,  608,  611,  611,  609,
      609,  980,  610,  986,  611,  982,  612,  610,  610,  610,
        0,  987,  612,  612,    0,  610,    0,  983,  611,  612,
        0,    0,  984,  613,  611,  611,  988,  614, 1029,  610,
      986,  615, 1031,  612,  610,  610,  610,  613,  987,  612,
      612,  614,  613,  613,  613,  615,  616,  614,  614,    0,

      613,  615,  615,  988,  614, 1029,    0,    0,  615, 1031,
      616, 1033,  617, 1036,  613,    0,  616,  616,  614,  613,
      613,  613,  615,  616,  614,  614,  617,  617,  615,  615,
     1037,  618,  617,  617,  619, 1038,    0,  616, 1033,  617,
     1036,    0,  619,  616,  616,  618,  619, 1040, 1043,  619,
        0,  618,  618,  617,  617,  620,  622, 1037,  618,  617,
      617,  619, 1038,  620,  622,    0,  621,  620,  622,  619,
      620,  622,  618,  619, 1040, 1043,  619,  624,  618,  618,
      621, 1044,  620,  622,    0,  624,  621,  621,  625,  624,
      620,  622,  624,  621,  620,  622,  625,  620,  622,  623,

      625,  623, 1069,  625,  624, 1070,  623,  621, 1044,  626,
      626,  623,  624,  621,  621,  625,  624,  626, 1072,  624,
        0,  626, 1074,  625,  626,    0,  623,  625,  623, 1069,
      625,  627, 1070,  623, 1075, 1087,  626,  626,  623,  627,
      628, 1097,  628,  627,  626, 1072,  627,  628,  626, 1074,
     1099,  626,  628,  629, 1101,  629,    0,    0,  627,    0,
      629, 1075, 1087,    0,    0,  629,  627,  628, 1097,  628,
      627,    0,    0,  627,  628,    0,  630, 1099,  630,  628,
      629, 1101,  629,  630,  631,    0,  631,  629,  630,    0,
        0,  631,  629,    0,    0,    0,  631,  633,    0,  633,

      632,    0,  632,  630,  633,  630,    0,  632,  632,  633,
      630,  631,  632,  631,    0,  630,    0,    0,  631,    0,
        0,    0,    0,  631,  633,    0,  633,  632,    0,  632,
      634,  633,  634,  636,  632,  632,  633,  634,    0,  632,
        0,  636,  634,    0,    0,  636,    0,  637,  636,    0,
        0,  637,    0,    0,  637,    0,    0,  634,    0,  634,
      636,    0,    0,    0,  634,    0,    0,  637,  636,  634,
      635,    0,  636,    0,  637,  636,    0,  638,  637,  638,
      635,  637,  635,  639,  638,    0,    0,  635,  635,  638,
        0,  639,  635,  640,  637,  639,    0,  635,  639,    0,

        0,  640,    0,    0,  638,  640,  638,  635,  640,  635,
      639,  638,    0,    0,  635,  635,  638,  642,  639,  635,
      640,  642,  639,  641,  642,  639,  641,    0,  640,    0,
        0,  643,  640,    0,  641,  640,    0,  642,  641,  643,
        0,  641,    0,  643,  642,    0,  643,  644,  642,    0,
      641,  642,    0,  641,    0,  644,    0,    0,  643,  644,
        0,  641,  644,  646,  642,  641,  643,    0,  641,  645,
      643,  646,    0,  643,  644,  646,  645,  645,  646,  647,
        0,  645,  644,    0,  645,    0,  644,  647,    0,  644,
      646,  647,    0,    0,  647,  648,  645,    0,  646,  649,

        0,    0,  646,  645,  645,  646,  647,    0,  645,  648,
        0,  645,    0,  649,  647,  648,  648,  650,  647,  649,
      649,  647,  648,  663,    0,  663,  649,    0,    0,  650,
      663,  650,    0,  651,    0,  663,  648,  650,  650,    0,
      649,  651,  648,  648,  650,  651,  649,  649,  651,    0,
      663,    0,  663,    0,    0,  652,  650,  663,  650,    0,
      651,    0,  663,  652,  650,  650,  653,  652,  651,  652,
      652,  655,  651,  653,  653,  651,    0,  654,  653,  655,
      654,  653,  652,  655,    0,    0,  655,    0,  654,    0,
      652,    0,  654,  653,  652,  654,  652,  652,  655,    0,

      653,  653,    0,    0,  654,  653,  655,  654,  653,    0,
      655,    0,    0,  655,  656,  654,  657,    0,  656,  654,
      657,  656,  654,  657,  658,    0,  659,    0,  658,    0,
      659,  658,    0,  659,  656,    0,  657,    0,    0,    0,
        0,  656,    0,  657,  658,  656,  659,  657,  656,    0,
      657,  658,    0,  659,  660,  658,  661,  659,  658,    0,
      659,  656,  672,  657,  662,    0,  672,    0,  660,  672,
      661,  658,    0,  659,  660,  660,  661,  661,  662,    0,
        0,  660,  672,  661,  662,  662,    0,    0,    0,  672,
        0,  662,    0,  672,    0,  660,  672,  661,    0,    0,

        0,  660,  660,  661,  661,  662,    0,    0,  665,  672,
      665,  662,  662,  664,  665,    0,  664,  665,  667,    0,
      664,    0,  666,  664,  666,    0,    0,    0,    0,  666,
      665,  664,  667,    0,  666,  665,  664,  665,  667,  667,
      664,  665,    0,  664,  665,  667,    0,  664,  668,  666,
      664,  666,    0,  670,    0,    0,  666,  665,  664,  667,
        0,  666,  668,  664,  669,  667,  667,  670,  668,  668,
      669,    0,  670,  670,  670,  668,    0,    0,  669,    0,
      670,    0,    0,  673,  669,  669,  673,  673,    0,  668,
      673,  669,    0,    0,  670,  668,  668,  669,    0,  670,

      670,  670,  671,  673,    0,  669,    0,    0,  671,    0,
      673,  669,  669,  673,  673,    0,  671,  673,  675,    0,
      674,    0,  671,  671,  674,    0,    0,  674,    0,  671,
      673,    0,  675,    0,    0,  671,    0,    0,  675,  675,
      674,  676,    0,  671,    0,  675,    0,  674,    0,  671,
      671,  674,    0,  677,  674,  676,    0,  677,    0,  675,
      677,  676,  676,    0,    0,  675,  675,  674,  676,    0,
      678,  757,  758,  677,  678,  757,  758,  678,  757,  758,
      677,    0,  676,    0,  677,    0,    0,  677,  676,  676,
      678,  757,  758,    0,    0,    0,    0,  678,  757,  758,

      677,  678,  757,  758,  678,  757,  758,  759,  766,  760,
      766,  759,    0,  760,  759,  766,  760,  678,  757,  758,
      766,    0,    0,    0,    0,    0,  761,  759,  759,  760,
      761,    0,    0,  761,  759,  766,  760,  766,  759,    0,
      760,  759,  766,  760,  762,  763,  761,  766,  762,  763,
        0,  762,  763,  761,  759,  759,  760,  761,    0,    0,
      761,    0,  764,    0,  762,  763,  764,    0,    0,  764,
        0,  762,  763,  761,    0,  762,  763,  764,  762,  763,
      765,  765,  764,    0,    0,  765,    0,    0,  765,  764,
        0,  762,  763,  764,    0,    0,  764,  767,    0,  768,

        0,  765,    0,  768,  764,    0,  768,  765,  765,  764,
        0,  767,  765,    0,    0,  765,  769,  767,  767,  768,
      769,    0,    0,  769,  767,    0,  768,    0,  765,    0,
      768,    0,    0,  768,    0,  770,  769,  771,  767,  770,
        0,    0,  770,  769,  767,  767,  768,  769,    0,    0,
      769,  771,  772,    0,    0,  770,  772,  771,  771,  772,
        0,  773,  770,  769,  771,  773,  770,  774,  773,  770,
        0,  774,  772,    0,  774,    0,    0,    0,  771,  772,
        0,  773,  770,  772,  771,  771,  772,  774,  773,  775,
        0,    0,  773,  775,  774,  773,  775,    0,  774,  772,

      776,  774,  776,    0,  775,    0,  777,  776,  773,  775,
      777,    0,  776,  777,  774,  778,  775,    0,    0,  778,
      775,    0,  778,  775,    0,    0,  777,  776,    0,  776,
        0,  775,    0,  777,  776,  778,  775,  777,    0,  776,
      777,  779,  778,  780,    0,  779,  778,  780,  779,  778,
      780,    0,  781,  777,  781,    0,  779,    0,  780,  781,
        0,  779,  778,  780,  781,    0,    0,    0,  779,  782,
      780,    0,  779,  782,  780,  779,  782,  780,    0,  781,
        0,  781,    0,  779,    0,  780,  781,    0,  779,  782,
      780,  781,    0,    0,  783,  784,  782,    0,  783,  784,

      782,  783,  784,  782,  785,    0,    0,    0,  785,    0,
        0,  785,    0,    0,  783,  784,  782,    0,    0,    0,
        0,  783,  784,    0,  785,  783,  784,    0,  783,  784,
      786,  785,  786,    0,  786,  785,    0,  786,  785,    0,
      787,  783,  784,    0,    0,    0,    0,    0,  787,    0,
      786,  785,  787,    0,  788,  787,    0,  786,    0,  786,
        0,  786,  788,    0,  786,    0,  788,  787,  788,  788,
        0,    0,  789,    0,    0,  787,  793,  786,  793,  787,
      789,  788,  787,  793,  789,    0,  790,  789,  793,  788,
        0,    0,    0,  788,  790,  788,  788,    0,  790,  789,

        0,  790,  792,  793,  791,  793,  792,  789,    0,  792,
      793,  789,  791,  790,  789,  793,  791,    0,  791,  791,
        0,  790,  792,    0,    0,  790,    0,    0,  790,  792,
      794,  791,  794,  792,    0,    0,  792,  794,    0,  791,
        0,    0,  794,  791,    0,  791,  791,    0,  795,  792,
      795,  796,    0,  796,  797,  795,  797,  794,  796,  794,
      795,  797,    0,  796,  794,    0,  797,    0,    0,  794,
        0,    0,  798,    0,    0,  795,  798,  795,  796,  798,
      796,  797,  795,  797,    0,  796,    0,  795,  797,    0,
      796,  802,  798,  797,  799,    0,    0,    0,  799,  798,

      800,  799,  799,  798,  800,  802,  798,  800,    0,    0,
        0,  802,  802,    0,  799,    0,    0,    0,  802,  798,
      800,  799,    0,    0,    0,  799,  801,  800,  799,  799,
      801,  800,  802,  801,  800,  803,    0,    0,  802,  802,
        0,  799,  803,    0,  804,    0,  801,  800,    0,  803,
        0,    0,    0,  801,  805,  803,  803,  801,  804,    0,
      801,    0,  803,  804,  804,  804,  806,    0,  805,  803,
        0,  804,    0,  801,  805,  805,  803,    0,    0,    0,
      806,  805,  803,  803,    0,  804,  806,  806,    0,    0,
      804,  804,  804,  806,    0,  805,  807,  808,    0,    0,

      807,  805,  805,  807,    0,  808,    0,  806,    0,  808,
      809,    0,  808,  806,  806,    0,  807,    0,  809,    0,
        0,    0,  809,  807,  808,  809,    0,  807,    0,    0,
      807,  810,  808,    0,  813,  810,  808,  809,  810,  808,
      811,    0,    0,  807,  811,  809,  812,  811,  813,  809,
      812,  810,  809,  812,  813,  813,    0,    0,  810,    0,
      811,  813,  810,    0,    0,  810,  812,  811,    0,  814,
        0,  811,  815,  812,  811,  813,  815,  812,  810,  815,
      812,  813,  813,  814,    0,    0,    0,  811,  814,  814,
      814,    0,  815,  812,    0,    0,  814,  816,  816,  815,

      817,    0,  816,  815,    0,  816,  815,    0,    0,    0,
      814,    0,    0,    0,  817,  814,  814,  814,  816,  815,
      817,  817,  819,    0,  816,  816,  818,  817,  818,  816,
      819,    0,  816,  818,  819,    0,    0,  819,  818,    0,
        0,  817,    0,    0,  820,  816,    0,  817,  817,  819,
        0,    0,  820,  818,    0,  818,  820,  819,  820,  820,
      818,  819,    0,    0,  819,  818,  821,    0,  821,    0,
      822,  820,  822,  821,    0,    0,    0,  822,  821,  820,
        0,    0,  822,  820,    0,  820,  820,  823,    0,    0,
        0,  823,  824,  821,  823,  821,  825,  822,    0,  822,

      821,    0,    0,    0,  822,  821,  824,  823,    0,  822,
      825,    0,  824,  824,  823,    0,  825,  825,  823,  824,
        0,  823,  826,  825,    0,    0,  826,  827,  827,  826,
        0,    0,  827,  824,  823,  827,    0,  825,    0,  824,
      824,    0,  826,  825,  825,  828,    0,  828,  827,  826,
        0,    0,  828,  826,  827,  827,  826,  828,    0,  827,
      829,  830,  827,    0,  829,  830,    0,  829,  830,  826,
        0,  831,  828,  831,  828,  827,  832,    0,  831,  828,
      829,  830,    0,  831,  828,    0,    0,  829,  830,    0,
      832,  829,  830,    0,  829,  830,  832,  832,  831,  833,

      831,  834,    0,  832,  895,  831,  895,  829,  830,    0,
      831,  895,    0,  833,    0,  834,  895,  832,    0,  833,
      833,  834,  834,  832,  832,  894,  833,    0,  834,  894,
        0,  895,  894,  895,    0,    0,    0,    0,  895,    0,
      833,    0,  834,  895,    0,  894,  833,  833,  834,  834,
        0,  896,  894,  896,    0,  897,  894,  897,  896,  894,
        0,  899,  897,  896,  898,  899,  898,  897,  899,    0,
        0,  898,  894,    0,    0,    0,  898,    0,  896,    0,
      896,  899,  897,    0,  897,  896,    0,    0,  899,  897,
      896,  898,  899,  898,  897,  899,    0,  900,  898,  900,

      901,    0,  901,  898,  900,    0,    0,  901,  899,  900,
        0,  902,  901,  902,    0,    0,    0,    0,  902,    0,
        0,    0,    0,  902,  900,    0,  900,  901,    0,  901,
        0,  900,    0,    0,  901,  904,  900,    0,  902,  901,
      902,  903,  903,  903,  904,  902,  904,  905,  903,  905,
      902,  904,    0,  903,  905,  905,  904,    0,    0,  905,
        0,    0,  904,    0,    0,  906,    0,  906,  903,  903,
      903,  904,  906,  904,  905,  903,  905,  906,  904,    0,
      903,  905,  905,  904,    0,    0,  905,  908,  907,    0,
      907,    0,  906,    0,  906,  907,  908,    0,  908,  906,

      907,    0,    0,  908,  906,    0,    0,    0,  908,  909,
        0,  909,    0,    0,  908,  907,  909,  907,    0,    0,
        0,  909,  907,  908,    0,  908,    0,  907,    0,    0,
      908,    0,  910,    0,  910,  908,  909,    0,  909,  910,
      911,    0,  911,  909,  910,    0,    0,  911,  909,    0,
      912,    0,  911,    0,  912,    0,  913,  912,    0,  910,
      913,  910,    0,  913,    0,    0,  910,  911,    0,  911,
      912,  910,    0,  914,  911,  914,  913,  912,    0,  911,
      914,  912,    0,  913,  912,  914,  915,  913,  915,  916,
      913,  916,    0,  915,    0,    0,  916,  912,  915,    0,

      914,  916,  914,  913,  917,    0,    0,  914,  917,    0,
      918,  917,  914,  915,  918,  915,  916,  918,  916,    0,
      915,    0,  919,  916,  917,  915,  919,    0,  916,  919,
      918,  917,    0,    0,    0,  917,    0,  918,  917,  921,
      920,  918,  919,  921,  918,    0,  921,    0,  920,  919,
        0,  917,  920,  919,  922,  920,  919,  918,  922,  921,
        0,  922,    0,  923,    0,    0,  921,  920,    0,  919,
      921,    0,    0,  921,  922,  920,    0,  923,    0,  920,
        0,  922,  920,  923,  923,  922,  921,  924,  922,  924,
      923,    0,    0,    0,  924,    0,    0,    0,    0,  924,

        0,  922,  926,    0,  923,    0,  926,    0,    0,  926,
      923,  923,    0,    0,  924,    0,  924,    0,    0,    0,
        0,  924,  926,    0,  930,    0,  924,  925,  930,  926,
      925,  930,  927,  926,  925,    0,  926,  925,    0,    0,
        0,    0,  928,    0,  930,  925,  927,    0,    0,  926,
      925,  930,  927,  927,  925,  930,  928,  925,  930,  927,
        0,  925,  928,  928,  925,    0,    0,  929,    0,  928,
        0,  930,  925,  927,    0,    0,    0,  925,  931,  927,
      927,  929,  931,  928,    0,  931,  929,  929,  929,  928,
      928,    0,    0,    0,  929,  933,  932,  933,  931,    0,

      932,  933,    0,  932,  933,  931,    0,    0,  929,  931,
        0,    0,  931,  929,  929,  929,  932,  933,    0,    0,
        0,    0,  933,  932,  933,  931,    0,  932,  933,    0,
      932,  933,    0,  934,  935,  934,  935,    0,    0,    0,
      934,  935,    0,  932,  933,  934,  935,  936,    0,  936,
        0,    0,    0,    0,  936,    0,    0,    0,    0,  936,
      934,  935,  934,  935,    0,    0,    0,  934,  935,    0,
        0,    0,  934,  935,  936,  937,  936,  937,  938,  940,
      938,  936,  937,    0,    0,  938,  936,  937,    0,  939,
      938,  939,    0,  940,    0,    0,  939,    0,    0,  940,

      940,  939,  937,    0,  937,  938,  940,  938,    0,  937,
      941,    0,  938,    0,  937,  942,  939,  938,  939,  943,
      940,    0,    0,  939,  941,    0,  940,  940,  939,  942,
      941,  941,    0,  943,    0,  942,  942,  941,  943,  943,
      943,  944,  942,  944,    0,    0,  943,  945,  944,  945,
        0,  941,    0,  944,  945,  945,  942,  941,  941,  945,
      943,    0,  942,  942,    0,  943,  943,  943,  944,    0,
      944,  946,    0,  946,  945,  944,  945,  947,  946,  947,
      944,  945,  945,  946,  947,    0,  945,  948,  949,  947,
        0,  948,  949,    0,  948,  949,    0,    0,  946,    0,

      946,    0,    0,    0,  947,  946,  947,  948,  949,    0,
      946,  947,    0,  950,  948,  949,  947,  950,  948,  949,
      950,  948,  949,  952,  951,    0,    0,  952,    0,    0,
      952,    0,  951,  950,  948,  949,  951,    0,  991,  951,
      950,    0,  991,  952,  950,  991,  992,  950,  992,    0,
      952,  951,  992,    0,  952,  992,    0,  952,  991,  951,
      950,    0,    0,  951,    0,  991,  951,  993,  992,  991,
      952,  993,  991,  992,  993,  992,  994,  995,    0,  992,
      994,  995,  992,  994,  995,  991,  996,  993,    0,    0,
      996,    0,    0,  996,  993,  992,  994,  995,  993,    0,

        0,  993,    0,  994,  995,  997,  996,  994,  995,  997,
      994,  995,  997,  996,  993,    0,    0,  996,    0,    0,
      996,  998,    0,  994,  995,  997,  999,    0,    0,    0,
     1000,    0,  997,  996,    0,  998,  997,    0,    0,  997,
      999,  998,  998,    0, 1000, 1001,  999,  999,  998, 1000,
     1000, 1000,  997,  999,    0,    0,    0, 1000,    0, 1001,
        0, 1002,  998,    0,    0, 1001, 1001,  999,  998,  998,
     1003, 1000, 1001,  999,  999, 1002, 1000, 1000, 1000,    0,
     1004, 1002, 1002,    0, 1003, 1005, 1001, 1005, 1002,    0,
     1003, 1003, 1001, 1001, 1004,    0,    0, 1003,    0, 1005,

     1004, 1004, 1002,    0,    0, 1005, 1005, 1004, 1002, 1002,
        0, 1003, 1005,    0, 1005, 1006, 1006, 1003, 1003,    0,
     1007, 1004,    0,    0,    0,    0, 1005, 1004, 1004, 1006,
        0,    0, 1005, 1005, 1007, 1006, 1006,    0, 1009, 1007,
     1007, 1007, 1006, 1006, 1008,    0, 1009, 1007, 1008,    0,
     1009, 1008,    0, 1009,    0,    0, 1006,    0,    0,    0,
        0, 1007, 1006, 1006, 1008, 1009, 1007, 1007, 1007,    0,
        0, 1008, 1010, 1009,    0, 1008, 1010, 1009, 1008, 1010,
     1009, 1011, 1012,    0,    0, 1011,    0,    0, 1011,    0,
     1012, 1008, 1010,    0, 1012,    0,    0, 1012, 1013, 1010,

     1014, 1011, 1013, 1010, 1014, 1013, 1010, 1014, 1011, 1012,
        0,    0, 1011,    0,    0, 1011,    0, 1012, 1013, 1010,
     1014, 1012,    0,    0, 1012, 1013, 1015, 1014, 1011, 1013,
     1015, 1014, 1013, 1015, 1014, 1016, 1017,    0,    0, 1016,
     1017,    0, 1016, 1017, 1018, 1013, 1015, 1014, 1018,    0,
     1016, 1018,    0, 1015, 1019, 1016, 1017, 1015, 1019, 1018,
     1015, 1019, 1016, 1017, 1018,    0, 1016, 1017,    0, 1016,
     1017, 1018, 1020, 1015, 1019, 1018,    0, 1016, 1018,    0,
     1020, 1019, 1016, 1017, 1020, 1019, 1018, 1020, 1019,    0,
     1021, 1018,    0,    0,    0,    0, 1022, 1021, 1021, 1020,

     1022, 1019, 1021,    0,    0, 1021,    0, 1020, 1022,    0,
        0, 1020, 1022,    0, 1020, 1022,    0, 1021, 1023,    0,
        0,    0,    0, 1022, 1021, 1021, 1023, 1022,    0, 1021,
     1023,    0, 1021, 1023, 1025, 1022, 1024,    0, 1025, 1022,
        0, 1025, 1022,    0, 1024, 1023,    0,    0, 1024,    0,
     1024, 1024,    0, 1023, 1025,    0,    0, 1023,    0,    0,
     1023, 1025, 1027, 1024,    0, 1025, 1027,    0, 1025, 1027,
        0, 1024,    0,    0,    0, 1024,    0, 1024, 1024, 1026,
     1026, 1025, 1027,    0, 1026,    0, 1049, 1026, 1028, 1027,
        0,    0, 1028, 1027, 1049, 1028, 1027,    0, 1049,    0,

     1026, 1049,    0,    0,    0,    0, 1026, 1026, 1028, 1027,
        0, 1026,    0, 1049, 1026, 1028,    0,    0, 1050, 1028,
        0, 1049, 1028,    0, 1051, 1049, 1050, 1026, 1049, 1052,
     1050,    0, 1051, 1050, 1053, 1028, 1051, 1052, 1051, 1051,
        0, 1052, 1053,    0, 1052, 1050, 1053,    0, 1053, 1053,
        0, 1051,    0, 1050,    0,    0, 1052, 1050,    0, 1051,
     1050, 1053, 1054, 1051, 1052, 1051, 1051,    0, 1052, 1053,
     1054, 1052, 1055, 1053, 1054, 1053, 1053, 1054,    0,    0,
     1055, 1058, 1056, 1058, 1055,    0,    0, 1055, 1058, 1054,
        0,    0,    0, 1058,    0,    0, 1056, 1054, 1057, 1055,

        0, 1054, 1056, 1056, 1054,    0,    0, 1055, 1058, 1056,
     1058, 1055, 1057,    0, 1055, 1058,    0, 1057, 1057, 1057,
     1058,    0,    0, 1056, 1059, 1057, 1059,    0,    0, 1056,
     1056, 1059,    0,    0,    0, 1060, 1059,    0,    0, 1057,
     1061,    0,    0, 1060, 1057, 1057, 1057, 1060, 1061, 1062,
     1060, 1059, 1061, 1059,    0, 1061,    0, 1062, 1059,    0,
        0, 1062, 1060, 1059, 1062, 1063,    0, 1061,    0, 1063,
     1060,    0, 1063,    0, 1060, 1061, 1062, 1060,    0, 1061,
        0,    0, 1061, 1064, 1062, 1063,    0, 1064, 1062,    0,
     1064, 1062, 1063, 1065, 1064,    0, 1063, 1065, 1066, 1063,

     1065,    0, 1066, 1064,    0, 1066,    0,    0,    0,    0,
     1064,    0, 1063, 1065, 1064, 1067,    0, 1064, 1066, 1067,
     1065, 1064, 1067,    0, 1065, 1066,    0, 1065,    0, 1066,
     1064,    0, 1066,    0, 1068, 1067,    0,    0, 1068,    0,
     1065, 1068, 1067, 1078, 1079, 1066, 1067, 1078, 1079, 1067,
     1078, 1079, 1080,    0, 1068,    0, 1080,    0,    0, 1080,
        0, 1068, 1067, 1078, 1079, 1068, 1081,    0, 1068, 1081,
     1078, 1079, 1080, 1081, 1078, 1079, 1081, 1078, 1079, 1080,
        0, 1068,    0, 1080,    0,    0, 1080,    0, 1082, 1081,
     1078, 1079, 1082, 1081, 1083, 1082, 1081,    0, 1083, 1080,

     1081, 1083,    0, 1081,    0, 1084,    0, 1084, 1082, 1083,
        0, 1085, 1084, 1085, 1083, 1082, 1081, 1084, 1085, 1082,
        0, 1083, 1082, 1085,    0, 1083,    0,    0, 1083,    0,
        0,    0, 1084,    0, 1084, 1082, 1083,    0, 1085, 1084,
     1085, 1083,    0,    0, 1084, 1085, 1086,    0, 1086,    0,
     1085,    0,    0, 1086, 1092, 1092, 1092, 1093, 1086, 1093,
     1094, 1092, 1094,    0, 1093,    0, 1092, 1094,    0, 1093,
        0,    0, 1094, 1086,    0, 1086,    0,    0,    0,    0,
     1086, 1092, 1092, 1092, 1093, 1086, 1093, 1094, 1092, 1094,
     1095, 1093, 1095, 1092, 1094,    0, 1093, 1095, 1096, 1094,

     1096,    0, 1095,    0, 1100, 1096, 1100,    0, 1098,    0,
     1096, 1100, 1098,    0,    0, 1098, 1100, 1095,    0, 1095,
        0,    0,    0,    0, 1095, 1096,    0, 1096, 1098, 1095,
        0, 1100, 1096, 1100,    0, 1098,    0, 1096, 1100, 1098,
        0,    0, 1098, 1100, 1102,    0, 1102, 1104,    0, 1104,
        0, 1102, 1102,    0, 1104, 1098, 1102,    0,    0, 1104,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1102,    0, 1102, 1104,    0, 1104,    0, 1102, 1102,
        0, 1104,    0, 1102,    0,    0, 1104, 1106,    0,    0,
     1106, 1107,    0, 1107, 1107, 1109,    0, 1109, 1109, 1110,

        0, 1110, 1110, 1111,    0, 1111, 1111, 1112,    0, 1112,
     1112, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2420 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int _line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 2707 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1106 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1105 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(AUTO_INCREMENT)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(MEDIUMBLOB)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(MEDIUMTEXT)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(MEDIUMINT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(LONGBLOB)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(LONGTEXT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(TINYBLOB)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(TINYTEXT)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(UNSIGNED)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(TINYINT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(BLOB)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 145:
#line 203 "flex_lexer.l"
case 146:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3536 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1106 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1106 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1105);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void hsql_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 233 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

